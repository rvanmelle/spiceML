<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN"
    "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd">
<?xml-stylesheet type="text/xsl" href="../etc/mathml.xsl"?>
<?xml-stylesheet href="#internalStyle" type="text/css"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>OSPI</title>

<link href="../../doc-src/static/blueprint/screen.css" type="text/css" media="screen"/>
<link href="../../doc-src/static/blueprint/print.css" type="text/css" media="print"/>
    
    <style type="text/css">
    <![CDATA[
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .function-name {
        /* font-lock-function-name-face */
        color: #0000ff;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #a020f0;
      }
      .tuareg-font-lock-governing {
        /* tuareg-font-lock-governing-face */
        color: #0000ff;
        font-weight: bold;
      }
      .tuareg-font-lock-operator {
        /* tuareg-font-lock-operator-face */
        color: #a52a2a;
      }
      .comment {
        color: #FF0000;
      }
      .type {
        /* font-lock-type-face */
        color: #228b22;
      }
      .variable-name {
        /* font-lock-variable-name-face */
        color: #b8860b;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    ]]>
    </style>
    
  </head>
  
  <body>
    
	
     
    



<h2><a name="sec1" id="sec1"></a>
ELG7132D: Assign 2</h2>

<ul>
<li>By: Reid van Melle</li>
<li>Student No: 5107751</li>
</ul>

<h3><a name="sec2" id="sec2"></a>
Table of Contents</h3>

<div class="contents">
<dl>
<dt>
<a href="#sec1">ELG7132D: Assign 2</a>
</dt>
<dd>
<dl>
<dt>
<a href="#sec2">Table of Contents</a>
</dt>
<dt>
<a href="#sec3">Part 1: MNA Formulation</a>
</dt>
<dt>
<a href="#sec4">Part 2: Implementation</a>
</dt>
<dt>
<a href="#sec5">Part 3: Testing</a>
</dt>
<dt>
<a href="#sec6">Part 4: Verification</a>
</dt>
<dt>
<a href="#sec7">Part 5: Comparison</a>
</dt>
<dt>
<a href="#sec8">Part 6: Future Work</a>
</dt>
</dl>
</dd>
</dl>
</div>



<h3><a name="sec3" id="sec3"></a>
Part 1: MNA Formulation</h3>

<p class="first">The MNA G, C, and b matrices are shown in the appedices.  These
matrices were generated automatically from the input circuit
description. The f matrix is impossible to print because it is
composed of compiled functions.</p>




<h3><a name="sec4" id="sec4"></a>
Part 2: Implementation</h3>

<p class="first">The solution was written in OCAML and developed using the GNU
Scientific Library (GSL).  The GSL is written in C but has bindings
for many different languages including OCAML.  The solution is written
to be a completely general purpose simulation engine (i.e. nothing is
hardcoded) and it meant to be completely extensible.  Therefore, all
of the circuit parameters are inputs to the program and it is
completely programmable.</p>

<p>Some key points about the solution:</p>

<ul>
<li>source stepping is included in both the DC solver and the HB solver</li>
<li>in both cases, the source stepper is hardcoded to use 50 linear
steps</li>
<li>the GSL multi-dimensional linear solver is used in order to solve
sets of non-linear equations.  The solver requires that the output
vector and Jacobian are computed periodically.  Several different
algorithms are available, but I used the Newton solver in all cases.</li>
<li>I chose the maximum number of iterations to be 100 and an error
epsilon of 1e-7 for the non-linear solvers</li>
<li>Once the HB solver has computed the final solution, it computes the
ratio of the highest harmonic to the fundamental.  If the ratio
exceeds a threshold of 1e-3, a warning is issued to the user.</li>
</ul>

<p>Instead of including all the code, I have elected to choose several
key pieces of the solution and include them along with comments.</p>

<p>The first pieces of code shows the declaration of the main circuit,
invoking first a DC analysis and then a Harmonic Balance analysis.
The analysis engines automatically store the results in a database.
After the analysis is done, the calculation of the measurements of
interest are shown including DC shift, Gain, 2nd/3rd order harmonic
distortion, and THD.  Finally, the plotter is invoked to display the
results... some plots will be shown later.  NOTE: The code for the
metric calculations have been modified slightly since this document
was generated.


    <pre>
<span class="tuareg-font-lock-governing">let</span> <span class="variable-name">c </span><span class="tuareg-font-lock-operator">=</span> new_circuit <span class="tuareg-font-lock-operator">()</span> <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">vcc</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> rsig</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> re</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> rc</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> rl</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> c1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> c2 </span><span class="tuareg-font-lock-operator">=</span>
    15.<span class="tuareg-font-lock-operator">,</span> 2.5e3<span class="tuareg-font-lock-operator">,</span> 28.57e3<span class="tuareg-font-lock-operator">,</span> 20e3<span class="tuareg-font-lock-operator">,</span> 10e3<span class="tuareg-font-lock-operator">,</span> 20e<span class="tuareg-font-lock-operator">-</span>3<span class="tuareg-font-lock-operator">,</span> 20e<span class="tuareg-font-lock-operator">-</span>3 <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">harmonics </span><span class="tuareg-font-lock-operator">=</span> 20
  <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">f </span><span class="tuareg-font-lock-operator">=</span> 2. <span class="tuareg-font-lock-operator">*.</span> pi <span class="tuareg-font-lock-operator">*.</span> 10e3 <span class="tuareg-font-lock-governing">in</span>
  c<span class="tuareg-font-lock-operator">#</span>vsrc 1 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">id</span><span class="tuareg-font-lock-operator">:</span><span class="type">50 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ac</span><span class="tuareg-font-lock-operator">:</span>
    <span class="tuareg-font-lock-operator">(</span><span class="type">Source</span>.vac <span class="tuareg-font-lock-operator">~</span><span class="variable-name">src_type</span><span class="tuareg-font-lock-operator">:</span>`COS <span class="tuareg-font-lock-operator">~</span><span class="variable-name">freq</span><span class="tuareg-font-lock-operator">:</span><span class="type">f </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">mag</span><span class="tuareg-font-lock-operator">:</span><span class="type">100e</span><span class="tuareg-font-lock-operator">-</span><span class="type">3 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">phase</span><span class="tuareg-font-lock-operator">:(</span>pi <span class="tuareg-font-lock-operator">/.</span> 6.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">());</span>
  c<span class="tuareg-font-lock-operator">#</span>vsrc 4 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">id</span><span class="tuareg-font-lock-operator">:</span><span class="type">51 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">dc</span><span class="tuareg-font-lock-operator">:</span><span class="type">vcc</span><span class="tuareg-font-lock-operator">;</span>
<span class="comment">  c#vsrc 7 0 ~id:52 ~dc:(-.vcc);
</span>  c<span class="tuareg-font-lock-operator">#</span>res 1 2 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">rsig</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>res 3 4 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">rc</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>res 6 7 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">re</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>cap 6 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">c</span><span class="tuareg-font-lock-operator">:</span><span class="type">c2</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>cap 3 5 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">c</span><span class="tuareg-font-lock-operator">:</span><span class="type">c1</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>res 5 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">rl</span><span class="tuareg-font-lock-operator">;</span>
  <span class="type">BJT</span>.bjt_subckt c <span class="tuareg-font-lock-operator">~</span><span class="variable-name">nb</span><span class="tuareg-font-lock-operator">:</span><span class="type">2 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">nc</span><span class="tuareg-font-lock-operator">:</span><span class="type">3 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ne</span><span class="tuareg-font-lock-operator">:</span><span class="type">6 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ns</span><span class="tuareg-font-lock-operator">:</span><span class="type">0</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>dc <span class="string">"DC"</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>hb <span class="string">"HB"</span> <span class="tuareg-font-lock-operator">~</span>harmonics <span class="tuareg-font-lock-operator">~</span><span class="variable-name">w</span><span class="tuareg-font-lock-operator">:</span><span class="type">f</span><span class="tuareg-font-lock-operator">;</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">f1 </span><span class="tuareg-font-lock-operator">=</span> f <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">f2 </span><span class="tuareg-font-lock-operator">=</span> 2. <span class="tuareg-font-lock-operator">*.</span> f <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">f3 </span><span class="tuareg-font-lock-operator">=</span> 3. <span class="tuareg-font-lock-operator">*.</span> f <span class="tuareg-font-lock-governing">in</span>
  printf <span class="string">"DC shift: %g\n"</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vdc <span class="string">"DC"</span> 5<span class="tuareg-font-lock-operator">);</span>
  printf <span class="string">"Gain: %g\n"</span> <span class="tuareg-font-lock-operator">(</span>log10 <span class="tuareg-font-lock-operator">((</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 5 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">f1</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 1 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">f1</span><span class="tuareg-font-lock-operator">)));</span>
  printf <span class="string">"2nd HD: %g\n"</span> <span class="tuareg-font-lock-operator">(</span>log10 <span class="tuareg-font-lock-operator">((</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 5 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">f2</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 5 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">f1</span><span class="tuareg-font-lock-operator">)));</span>
  printf <span class="string">"3rd HD: %g\n"</span> <span class="tuareg-font-lock-operator">(</span>log10 <span class="tuareg-font-lock-operator">((</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 5 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">f3</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 5 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">f1</span><span class="tuareg-font-lock-operator">)));</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">sum </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">ref</span> 0. <span class="tuareg-font-lock-governing">in</span>
  <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 2 <span class="keyword">to</span> harmonics <span class="keyword">do</span>
    sum <span class="tuareg-font-lock-operator">:=</span> <span class="tuareg-font-lock-operator">!</span>sum <span class="tuareg-font-lock-operator">+.</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 5 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:((</span>float i<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> f<span class="tuareg-font-lock-operator">))</span>
  <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
  printf <span class="string">"THD: %g\n"</span> <span class="tuareg-font-lock-operator">(</span>log10 <span class="tuareg-font-lock-operator">(!</span>sum <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 5 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">f1</span><span class="tuareg-font-lock-operator">)));</span>
  c<span class="tuareg-font-lock-operator">#</span>plot `HB_TIME <span class="string">"HB"</span> <span class="tuareg-font-lock-operator">[</span>1<span class="tuareg-font-lock-operator">];</span>
  c<span class="tuareg-font-lock-operator">#</span>plot `HB_TIME <span class="string">"HB"</span> <span class="tuareg-font-lock-operator">[</span>5<span class="tuareg-font-lock-operator">]</span></pre></p>



<p>You may have noticed that in the preceeding piece of code, there was a
reference to the BJT subcircuit.  The code for this subcircuit and
associated non-linear equations is shown below.  This is one of the
trickier parts of the code because the subcircuit must be able to
function in any part of the circuit including various nodes being
connected to ground.</p>

<p>Because the non-linear functions are compiled and reused, they must be
able to dynamically lookup the correct location in the output vector
and/or Jacobian in which to insert computed results.  This is
accomplished through simple lookup functions which are passed into the
functions during creation.  It is worth noting that all of the input
node names and IDs are mapped to internal names when the circuit is
instantiated which creates some of the complication.


    <pre>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">beta </span><span class="tuareg-font-lock-operator">=</span> 100. <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">io </span><span class="tuareg-font-lock-operator">=</span> 1e<span class="tuareg-font-lock-operator">-</span>15 <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">vt </span><span class="tuareg-font-lock-operator">=</span> 25e<span class="tuareg-font-lock-operator">-</span>3
    
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">diode_eq_f</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">(</span><span class="variable-name">vfn</span><span class="tuareg-font-lock-operator">:</span><span class="type">lookup_fn</span><span class="tuareg-font-lock-operator">)</span> nb ne <span class="tuareg-font-lock-operator">~</span>x <span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">vb</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> ve </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>vfn x nb<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>vfn x ne<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">result </span><span class="tuareg-font-lock-operator">=</span> io <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">((</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> ve<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">-.</span> 1.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    result

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">diode_eq_df</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">(</span><span class="variable-name">vfn</span><span class="tuareg-font-lock-operator">:</span><span class="type">lookup_fn</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(</span><span class="variable-name">ifn</span><span class="tuareg-font-lock-operator">:</span><span class="type">index_fn</span><span class="tuareg-font-lock-operator">)</span> nb ne sign <span class="tuareg-font-lock-operator">~</span>x <span class="tuareg-font-lock-operator">~</span>y <span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">vb</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> ve </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>vfn x nb<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>vfn x ne<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">nb</span><span class="tuareg-font-lock-operator">',</span><span class="variable-name"> ne</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>ifn nb<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>ifn ne<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">sign </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> sign <span class="keyword">with</span> `POS <span class="tuareg-font-lock-operator">-&gt;</span> 1. <span class="tuareg-font-lock-operator">|</span> `NEG <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">-.</span>1. <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">_ </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> nb<span class="tuareg-font-lock-operator">'</span> <span class="keyword">with</span>
      <span class="tuareg-font-lock-operator">|</span> `Ground <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">()</span>
      <span class="tuareg-font-lock-operator">|</span> `Node nb<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">-&gt;</span>
          y.<span class="tuareg-font-lock-operator">{</span>nb<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">&lt;-</span> y.<span class="tuareg-font-lock-operator">{</span>nb<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">+.</span> sign <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">((</span>io <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> ve<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">_ </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> ne<span class="tuareg-font-lock-operator">'</span> <span class="keyword">with</span>
      <span class="tuareg-font-lock-operator">|</span> `Ground <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">()</span>
      <span class="tuareg-font-lock-operator">|</span> `Node ne<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">-&gt;</span>
          y.<span class="tuareg-font-lock-operator">{</span>ne<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">&lt;-</span> y.<span class="tuareg-font-lock-operator">{</span>ne<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">+.</span> sign <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(-.</span>1. <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>io <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> ve<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)))</span>
    <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-operator">()</span>
      
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">isrc_eq_f</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">(</span><span class="variable-name">vfn</span><span class="tuareg-font-lock-operator">:</span><span class="type">lookup_fn</span><span class="tuareg-font-lock-operator">)</span> nb ne nc <span class="tuareg-font-lock-operator">~</span>x <span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">vb</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> ve</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> vc </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>vfn x nb<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>vfn x ne<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>vfn x nc<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">result </span><span class="tuareg-font-lock-operator">=</span> beta <span class="tuareg-font-lock-operator">*.</span> io <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">((</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> ve<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">-.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> vc<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)))</span> <span class="tuareg-font-lock-governing">in</span>
    result

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">isrc_eq_df</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">(</span><span class="variable-name">vfn</span><span class="tuareg-font-lock-operator">:</span><span class="type">lookup_fn</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(</span><span class="variable-name">ifn</span><span class="tuareg-font-lock-operator">:</span><span class="type">index_fn</span><span class="tuareg-font-lock-operator">)</span> nb ne nc sign <span class="tuareg-font-lock-operator">~</span>x <span class="tuareg-font-lock-operator">~</span>y <span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">vb</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> ve</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> vc </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>vfn x nb<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>vfn x ne<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>vfn x nc<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">nb</span><span class="tuareg-font-lock-operator">',</span><span class="variable-name"> ne</span><span class="tuareg-font-lock-operator">',</span><span class="variable-name"> nc</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>ifn nb<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>ifn ne<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>ifn nc<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">coef </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>beta <span class="tuareg-font-lock-operator">*.</span> io<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">sign </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> sign <span class="keyword">with</span> `POS <span class="tuareg-font-lock-operator">-&gt;</span> 1. <span class="tuareg-font-lock-operator">|</span> `NEG <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">-.</span>1. <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">_ </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> nb<span class="tuareg-font-lock-operator">'</span> <span class="keyword">with</span>
      <span class="tuareg-font-lock-operator">|</span> `Ground <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">()</span>
      <span class="tuareg-font-lock-operator">|</span> `Node nb<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">-&gt;</span>
          y.<span class="tuareg-font-lock-operator">{</span>nb<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">&lt;-</span> y.<span class="tuareg-font-lock-operator">{</span>nb<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">+.</span> sign <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>coef <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">((</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> ve<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">-.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> vc<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">))))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">_ </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> ne<span class="tuareg-font-lock-operator">'</span> <span class="keyword">with</span>
      <span class="tuareg-font-lock-operator">|</span> `Ground <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">()</span>
      <span class="tuareg-font-lock-operator">|</span> `Node ne<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">-&gt;</span>
          y.<span class="tuareg-font-lock-operator">{</span>ne<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">&lt;-</span> y.<span class="tuareg-font-lock-operator">{</span>ne<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">+.</span> sign <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(-.</span>coef <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> ve<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">_ </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> nc<span class="tuareg-font-lock-operator">'</span> <span class="keyword">with</span>
      <span class="tuareg-font-lock-operator">|</span> `Ground <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">()</span>
      <span class="tuareg-font-lock-operator">|</span> `Node nc<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">-&gt;</span>
          y.<span class="tuareg-font-lock-operator">{</span>nc<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">&lt;-</span> y.<span class="tuareg-font-lock-operator">{</span>nc<span class="tuareg-font-lock-operator">'}</span> <span class="tuareg-font-lock-operator">+.</span> sign <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>coef <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">((</span>vb <span class="tuareg-font-lock-operator">-.</span> vc<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)))</span>
    <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-operator">()</span>

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">bjt_subckt</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">(</span><span class="variable-name">c</span><span class="tuareg-font-lock-operator">:</span><span class="type">circuit_driver</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">~</span>nb <span class="tuareg-font-lock-operator">~</span>nc <span class="tuareg-font-lock-operator">~</span>ne <span class="tuareg-font-lock-operator">~</span>ns <span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">n1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> n4 </span><span class="tuareg-font-lock-operator">=</span> 1001<span class="tuareg-font-lock-operator">,</span> 1004 <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">rb </span><span class="tuareg-font-lock-operator">=</span> 10. <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">re </span><span class="tuareg-font-lock-operator">=</span> 14. <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">cap </span><span class="tuareg-font-lock-operator">=</span> 1e<span class="tuareg-font-lock-operator">-</span>12 <span class="tuareg-font-lock-governing">in</span>
    c<span class="tuareg-font-lock-operator">#</span>res nb n1 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">rb</span><span class="tuareg-font-lock-operator">;</span>
    c<span class="tuareg-font-lock-operator">#</span>cap n1 nc <span class="tuareg-font-lock-operator">~</span><span class="variable-name">c</span><span class="tuareg-font-lock-operator">:</span><span class="type">cap</span><span class="tuareg-font-lock-operator">;</span>
    c<span class="tuareg-font-lock-operator">#</span>cap n1 n4 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">c</span><span class="tuareg-font-lock-operator">:</span><span class="type">cap</span><span class="tuareg-font-lock-operator">;</span>
    c<span class="tuareg-font-lock-operator">#</span>cap nc ns <span class="tuareg-font-lock-operator">~</span><span class="variable-name">c</span><span class="tuareg-font-lock-operator">:</span><span class="type">cap</span><span class="tuareg-font-lock-operator">;</span>
    c<span class="tuareg-font-lock-operator">#</span>res n4 ne <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">re</span><span class="tuareg-font-lock-operator">;</span>
    c<span class="tuareg-font-lock-operator">#</span>bsrc n1 nc <span class="tuareg-font-lock-operator">~</span><span class="variable-name">fx</span><span class="tuareg-font-lock-operator">:(</span>diode_eq_f c<span class="tuareg-font-lock-operator">#</span>v nb nc<span class="tuareg-font-lock-operator">)</span>
      <span class="tuareg-font-lock-operator">~</span><span class="variable-name">dfx</span><span class="tuareg-font-lock-operator">:(</span>diode_eq_df c<span class="tuareg-font-lock-operator">#</span>v c<span class="tuareg-font-lock-operator">#</span>index nb nc<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">();</span>
    c<span class="tuareg-font-lock-operator">#</span>bsrc n1 n4 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">fx</span><span class="tuareg-font-lock-operator">:(</span>diode_eq_f c<span class="tuareg-font-lock-operator">#</span>v nb ne<span class="tuareg-font-lock-operator">)</span>
      <span class="tuareg-font-lock-operator">~</span><span class="variable-name">dfx</span><span class="tuareg-font-lock-operator">:(</span>diode_eq_df c<span class="tuareg-font-lock-operator">#</span>v c<span class="tuareg-font-lock-operator">#</span>index nb ne<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">();</span>
    c<span class="tuareg-font-lock-operator">#</span>bsrc nc n4 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">fx</span><span class="tuareg-font-lock-operator">:(</span>isrc_eq_f c<span class="tuareg-font-lock-operator">#</span>v nb ne nc<span class="tuareg-font-lock-operator">)</span>
      <span class="tuareg-font-lock-operator">~</span><span class="variable-name">dfx</span><span class="tuareg-font-lock-operator">:(</span>isrc_eq_df c<span class="tuareg-font-lock-operator">#</span>v c<span class="tuareg-font-lock-operator">#</span>index nb ne nc<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">()</span></pre></p>


<p>The DC solver is shown below.  The main function to observe is the
&quot;solve_at&quot; function which is a non-linear source-stepping solver
taking a total of 50 steps.  The DC module also supports DC sweeps
which can be seen in the &quot;sweep&quot; and &quot;create_sweep&quot; functions.  This
required that the DC sources all have &quot;id's&quot; and the actual voltage
values are parameterizable at runtime.</p>

<p>    <pre>
<span class="tuareg-font-lock-governing">module</span> <span class="type">DcAnalysis </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-governing">functor</span> <span class="tuareg-font-lock-operator">(</span><span class="variable-name">Solver</span><span class="tuareg-font-lock-operator">:</span> <span class="type">SOLVER</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-governing">struct</span>

  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">stepping </span><span class="tuareg-font-lock-operator">=</span> <span class="constant">true</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">solver_type </span><span class="tuareg-font-lock-operator">=</span> `DERIV
  <span class="keyword">exception</span> <span class="variable-name">ConvergenceFailed</span> <span class="tuareg-font-lock-operator">of</span> string
    
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">print_status</span><span class="variable-name"> result alpha </span><span class="tuareg-font-lock-operator">=</span> 
    <span class="keyword">match</span> result <span class="keyword">with</span>
      <span class="tuareg-font-lock-operator">|</span> Converged <span class="tuareg-font-lock-operator">-&gt;</span>
          debug <span class="string">"converged at alpha=%g"</span> alpha<span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-operator">|</span> IterationLimitExceeded <span class="tuareg-font-lock-operator">-&gt;</span>
          debug <span class="string">"failed at alpha=%g"</span> alpha

<span class="string">  let solve_at (s:Solver.t) (r:recorder) source_val =
</span>    <span class="keyword">if</span> stepping <span class="keyword">then</span> <span class="tuareg-font-lock-governing">begin</span>
      info <span class="string">"DC: starting source stepping "</span><span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">num_steps </span><span class="tuareg-font-lock-operator">=</span> 50 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">init_x </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Array</span>.make <span class="tuareg-font-lock-operator">(</span><span class="type">Solver</span>.size s<span class="tuareg-font-lock-operator">)</span> 0. <span class="tuareg-font-lock-governing">in</span>
      <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> num_steps <span class="keyword">do</span>
        printf <span class="string">"."</span><span class="tuareg-font-lock-operator">;</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">alpha </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float i<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>float num_steps<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
        <span class="type">Solver</span>.set_b_vec <span class="tuareg-font-lock-operator">~</span>alpha s source_val<span class="tuareg-font-lock-operator">;</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">result </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> solver_type <span class="keyword">with</span>
          <span class="tuareg-font-lock-operator">|</span> `DERIV <span class="tuareg-font-lock-operator">-&gt;</span> <span class="type">Solver</span>.solve_nonlinear <span class="tuareg-font-lock-operator">~</span>init_x s
          <span class="tuareg-font-lock-operator">|</span> `NODERIV <span class="tuareg-font-lock-operator">-&gt;</span> <span class="type">Solver</span>.solve_nonlinear_noderiv <span class="tuareg-font-lock-operator">~</span>init_x s
        <span class="tuareg-font-lock-governing">in</span>
        <span class="tuareg-font-lock-operator">(</span><span class="keyword">match</span> result <span class="keyword">with</span>
          <span class="tuareg-font-lock-operator">|</span> Converged <span class="tuareg-font-lock-operator">-&gt;</span>
              <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">soln </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Solver</span>.get_solution s <span class="tuareg-font-lock-governing">in</span>
              <span class="type">Array</span>.blit soln 0 init_x 0 <span class="tuareg-font-lock-operator">(</span><span class="type">Solver</span>.size s<span class="tuareg-font-lock-operator">);</span>
          <span class="tuareg-font-lock-operator">|</span> IterationLimitExceeded <span class="tuareg-font-lock-operator">-&gt;</span>
              <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">s </span><span class="tuareg-font-lock-operator">=</span> sprintf <span class="string">"DC source stepping failed at alpha=%g\n%!"</span> alpha <span class="tuareg-font-lock-governing">in</span>
              <span class="keyword">raise</span> <span class="tuareg-font-lock-operator">(</span>ConvergenceFailed s<span class="tuareg-font-lock-operator">)</span>
        <span class="tuareg-font-lock-operator">);</span>
      <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
      info <span class="string">"\nDC: finished!"</span><span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">end</span> <span class="keyword">else</span> <span class="tuareg-font-lock-governing">begin</span>
<span class="string">      Solver.set_b_vec s source_val;
</span>      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">result </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> solver_type <span class="keyword">with</span>
        <span class="tuareg-font-lock-operator">|</span> `DERIV <span class="tuareg-font-lock-operator">-&gt;</span> <span class="type">Solver</span>.solve_nonlinear s
        <span class="tuareg-font-lock-operator">|</span> `NODERIV <span class="tuareg-font-lock-operator">-&gt;</span> <span class="type">Solver</span>.solve_nonlinear_noderiv s
      <span class="tuareg-font-lock-governing">in</span>
      print_status result 1.<span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">end</span>
      
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">solve</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">?(</span>name<span class="tuareg-font-lock-operator">=</span><span class="string">"dc"</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">?</span>source_val <span class="tuareg-font-lock-operator">(</span><span class="variable-name">s</span><span class="tuareg-font-lock-operator">:</span><span class="type">Solver.t</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">recorder</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">source_val </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Option</span>.default <span class="tuareg-font-lock-operator">(</span>`DC <span class="tuareg-font-lock-operator">(</span>0<span class="tuareg-font-lock-operator">,</span> 0.<span class="tuareg-font-lock-operator">))</span> source_val <span class="tuareg-font-lock-governing">in</span>
    solve_at s r source_val<span class="tuareg-font-lock-operator">;</span>
    <span class="comment">(*r#dump_reals name 0.*)</span>
    r<span class="tuareg-font-lock-operator">#</span>append_real name 0. <span class="tuareg-font-lock-operator">(</span><span class="type">Solver</span>.get_real s<span class="tuareg-font-lock-operator">)</span>
    
      
  <span class="tuareg-font-lock-governing">type</span> <span class="type">sweep_spec </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span> <span class="variable-name">name</span>    <span class="tuareg-font-lock-operator">:</span> <span class="type">string</span><span class="tuareg-font-lock-operator">;</span>  <span class="comment">(* name of the sweep *)</span>
                      <span class="variable-name">id</span>      <span class="tuareg-font-lock-operator">:</span> <span class="type">int</span><span class="tuareg-font-lock-operator">;</span>     <span class="comment">(* ID of source to be swept *)</span>
                      <span class="variable-name">start</span>   <span class="tuareg-font-lock-operator">:</span> <span class="type">float</span><span class="tuareg-font-lock-operator">;</span>   <span class="comment">(* starting value *)</span>
                      <span class="variable-name">stop</span>    <span class="tuareg-font-lock-operator">:</span> <span class="type">float</span><span class="tuareg-font-lock-operator">;</span>   <span class="comment">(* final value *)</span>
                      <span class="variable-name">steps</span>   <span class="tuareg-font-lock-operator">:</span> <span class="type">int </span><span class="tuareg-font-lock-operator">}</span>    <span class="comment">(* # of steps *)</span>

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">create_sweep</span><span class="variable-name"> name id start stop steps </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-operator">{</span> name<span class="tuareg-font-lock-operator">=</span>name<span class="tuareg-font-lock-operator">;</span> id<span class="tuareg-font-lock-operator">=</span>id<span class="tuareg-font-lock-operator">;</span> start<span class="tuareg-font-lock-operator">=</span>start<span class="tuareg-font-lock-operator">;</span> stop<span class="tuareg-font-lock-operator">=</span>stop<span class="tuareg-font-lock-operator">;</span> steps<span class="tuareg-font-lock-operator">=</span>steps<span class="tuareg-font-lock-operator">}</span>
      
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">sweep</span><span class="variable-name"> s r spec </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="tuareg-font-lock-governing">rec</span> <span class="function-name">sweep_aux</span><span class="variable-name"> cur_step </span><span class="tuareg-font-lock-operator">=</span>
      <span class="keyword">if</span> cur_step <span class="tuareg-font-lock-operator">&lt;</span> spec.steps <span class="keyword">then</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">cur_val </span><span class="tuareg-font-lock-operator">=</span> spec.start <span class="tuareg-font-lock-operator">+.</span> <span class="tuareg-font-lock-operator">(</span>float cur_step<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>
          <span class="tuareg-font-lock-operator">(</span>spec.stop <span class="tuareg-font-lock-operator">-.</span> spec.start<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>float spec.steps<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-governing">in</span>
        info <span class="string">"Solving DC sweep at %g"</span> cur_val<span class="tuareg-font-lock-operator">;</span>
        solve_at s r <span class="tuareg-font-lock-operator">(</span>`DC <span class="tuareg-font-lock-operator">(</span>spec.id<span class="tuareg-font-lock-operator">,</span> cur_val<span class="tuareg-font-lock-operator">));</span>
<span class="string">        r#append_real spec.name cur_val (Solver.get_real s);
</span>        sweep_aux <span class="tuareg-font-lock-operator">(</span>cur_step <span class="tuareg-font-lock-operator">+</span> 1<span class="tuareg-font-lock-operator">)</span>
    <span class="tuareg-font-lock-governing">in</span>
    sweep_aux 0
        
      
<span class="tuareg-font-lock-governing">end</span><span class="tuareg-font-lock-operator">;;</span></pre></p>



<p>The final piece of code that I've included it the actual Harmonic
Balance solver module.  There are several things that I will draw
attention to.  At the top of the module is the main declaration of the
data structure for the HB analysis including various constants and
matrices which are computed once and then reused.</p>

<p>The &quot;create&quot; function is where the HB analysis is initialized.  All of
the constant vectors and matrices are pre-computed and/or initialized
at this point and stored in the HB data structure.  It is expected
that the DC analysis has already been run at this point.  The function
called &quot;solve&quot; attempts to solve the HB equations.  It first tries
directly computing the solution (i.e. without homotopy).  If this
fails, it falls back to a source stepping algorithm which is found in
the function called &quot;solve_with_stepping&quot;.  The stepping algorithm is
very simple.  Since the DC solution may have been source-stepped
previously, only the AC sources are scaled by alpha.  The stepping
algorithm is hard-coded to try to compute the solution in 50 linear
steps which was found to work by experimentation.</p>

<p>    <pre>
<span class="tuareg-font-lock-governing">module</span> <span class="type">HarmonicBalance </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-governing">functor</span> <span class="tuareg-font-lock-operator">(</span><span class="variable-name">Solver</span><span class="tuareg-font-lock-operator">:</span> <span class="type">SOLVER</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-governing">struct</span>
  <span class="tuareg-font-lock-governing">type</span> <span class="type">t </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>
    <span class="variable-name">circuit_size</span> <span class="tuareg-font-lock-operator">:</span> <span class="type">int</span><span class="tuareg-font-lock-operator">;</span>      <span class="comment">(* Number of variables in the MNA *)</span>
    <span class="variable-name">sample_size</span>  <span class="tuareg-font-lock-operator">:</span> <span class="type">int</span><span class="tuareg-font-lock-operator">;</span>      <span class="comment">(* Total number of time domain samples *)</span>
    <span class="variable-name">harmonics</span>    <span class="tuareg-font-lock-operator">:</span> <span class="type">int</span><span class="tuareg-font-lock-operator">;</span>      <span class="comment">(* Number of harmonics in solution *)</span>
    <span class="variable-name">total_size</span>   <span class="tuareg-font-lock-operator">:</span> <span class="type">int</span><span class="tuareg-font-lock-operator">;</span>      <span class="comment">(* Total size of the HB matrix *)</span>
    <span class="variable-name">base_freq</span>    <span class="tuareg-font-lock-operator">:</span> <span class="type">float</span><span class="tuareg-font-lock-operator">;</span>    <span class="comment">(* Base frequency for single-tone HB in rads/s*)</span>
    <span class="variable-name">permut_m</span>     <span class="tuareg-font-lock-operator">:</span> <span class="type">M.matrix</span><span class="tuareg-font-lock-operator">;</span> <span class="comment">(* Permutation matrix *)</span>
    <span class="variable-name">permut_m</span><span class="tuareg-font-lock-operator">'</span>    <span class="tuareg-font-lock-operator">:</span> <span class="type">M.matrix</span><span class="tuareg-font-lock-operator">;</span> <span class="comment">(* Inverse/transpose permutation matrix *)</span>
    <span class="variable-name">y_bar</span>        <span class="tuareg-font-lock-operator">:</span> <span class="type">M.matrix</span><span class="tuareg-font-lock-operator">;</span> <span class="comment">(* Static HB matrix *)</span>
    <span class="variable-name">dft_m</span>        <span class="tuareg-font-lock-operator">:</span> <span class="type">M.matrix</span><span class="tuareg-font-lock-operator">;</span> <span class="comment">(* Block diagonal DFT matrix *)</span>
    <span class="variable-name">idft_m</span>       <span class="tuareg-font-lock-operator">:</span> <span class="type">M.matrix</span><span class="tuareg-font-lock-operator">;</span> <span class="comment">(* Block diagonal inverse DFT matrix *)</span>
    <span class="variable-name">b_bar</span>        <span class="tuareg-font-lock-operator">:</span> <span class="type">V.vector</span><span class="tuareg-font-lock-operator">;</span> <span class="comment">(* Source vector *)</span>
    <span class="variable-name">x_bar</span>        <span class="tuareg-font-lock-operator">:</span> <span class="type">V.vector</span><span class="tuareg-font-lock-operator">;</span> <span class="comment">(* Results vector *)</span>
    <span class="variable-name">x_init</span>       <span class="tuareg-font-lock-operator">:</span> <span class="type">V.vector</span><span class="tuareg-font-lock-operator">;</span> <span class="comment">(* DC solution to start with *)</span>
  <span class="tuareg-font-lock-operator">}</span>
<span class="comment">
</span>  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">print</span><span class="variable-name"> t </span><span class="tuareg-font-lock-operator">=</span>
    fhtml_of_matrix <span class="tuareg-font-lock-operator">~</span><span class="variable-name">file</span><span class="tuareg-font-lock-operator">:</span><span class="string">"hb_engine.xml"</span>
      <span class="tuareg-font-lock-operator">[(</span><span class="string">"y_bar"</span><span class="tuareg-font-lock-operator">,(</span>`M t.y_bar<span class="tuareg-font-lock-operator">));</span> <span class="tuareg-font-lock-operator">(</span><span class="string">"permut"</span><span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>`M t.permut_m<span class="tuareg-font-lock-operator">));</span>
       <span class="tuareg-font-lock-operator">(</span><span class="string">"b_bar"</span><span class="tuareg-font-lock-operator">,(</span>`V t.b_bar<span class="tuareg-font-lock-operator">));</span> <span class="tuareg-font-lock-operator">(</span><span class="string">"x_bar"</span><span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>`V t.x_bar<span class="tuareg-font-lock-operator">));</span>
       <span class="tuareg-font-lock-operator">(</span><span class="string">"idft"</span><span class="tuareg-font-lock-operator">,(</span>`M t.idft_m<span class="tuareg-font-lock-operator">));</span> <span class="tuareg-font-lock-operator">(</span><span class="string">"dft"</span><span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>`M t.dft_m<span class="tuareg-font-lock-operator">));]</span>

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">harmonic_to_node</span><span class="variable-name"> t v_h </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">v_n </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.total_size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-operator">(</span>t.permut_m <span class="tuareg-font-lock-operator">|*&gt;</span> v_h<span class="tuareg-font-lock-operator">)</span> v_n<span class="tuareg-font-lock-operator">;</span>
    v_n

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">node_to_harmonic</span><span class="variable-name"> t v_n </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">v_h </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.total_size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-operator">(</span>t.permut_m<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">|*&gt;</span> v_n<span class="tuareg-font-lock-operator">)</span> v_h<span class="tuareg-font-lock-operator">;</span>
    v_h
    
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">harmonic_to_node_by_copy</span><span class="variable-name"> t v_h </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">v_n </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.total_size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.total_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">index </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>i <span class="tuareg-font-lock-operator">*</span> t.circuit_size<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">index </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>index <span class="tuareg-font-lock-operator">/</span> t.total_size<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">+</span> <span class="tuareg-font-lock-operator">(</span>index <span class="tuareg-font-lock-operator">mod</span> t.total_size<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
      v_n.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> v_h.<span class="tuareg-font-lock-operator">{</span>index<span class="tuareg-font-lock-operator">}</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    v_n

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">node_to_harmonic_by_copy</span><span class="variable-name"> t v_n </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">v_h </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.total_size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.total_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">index </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>i <span class="tuareg-font-lock-operator">*</span> <span class="tuareg-font-lock-operator">(</span>2 <span class="tuareg-font-lock-operator">*</span> t.harmonics <span class="tuareg-font-lock-operator">+</span> 1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">index </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>index <span class="tuareg-font-lock-operator">/</span> t.total_size<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">+</span> <span class="tuareg-font-lock-operator">(</span>index <span class="tuareg-font-lock-operator">mod</span> t.total_size<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
      v_h.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> v_n.<span class="tuareg-font-lock-operator">{</span>index<span class="tuareg-font-lock-operator">}</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    v_h

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">apply_gamma_gamma</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name"> t dfdx </span><span class="tuareg-font-lock-operator">=</span>
    <span class="comment">(* Now, we have to apply gamma and gamma' to the sub matrices *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">count </span><span class="tuareg-font-lock-operator">=</span> t.sample_size <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">gamma</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Dft</span>.gamma<span class="tuareg-font-lock-operator">'</span> count <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">gamma </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Dft</span>.gamma count <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">temp_m1 </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create count count <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">temp_m2 </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create count count <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">dfdx_bar_node </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create t.total_size t.total_size <span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.circuit_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      <span class="keyword">for</span> j <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.circuit_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">offset_i </span><span class="tuareg-font-lock-operator">=</span> i <span class="tuareg-font-lock-operator">*</span> count <span class="tuareg-font-lock-governing">in</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">offset_j </span><span class="tuareg-font-lock-operator">=</span> j <span class="tuareg-font-lock-operator">*</span> count <span class="tuareg-font-lock-governing">in</span>
        <span class="keyword">for</span> k <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> count <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
          <span class="keyword">for</span> l <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> count <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
            <span class="comment">(*printf "temp_m1.{%d,%d} &lt;- dfdx.{%d, %d}\n%!" k l (offset_i+k)
              (offset_j+l);*)</span>
            temp_m1.<span class="tuareg-font-lock-operator">{</span>k<span class="tuareg-font-lock-operator">,</span>l<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> dfdx.<span class="tuareg-font-lock-operator">{</span>offset_i<span class="tuareg-font-lock-operator">+</span>k<span class="tuareg-font-lock-operator">,</span> offset_j<span class="tuareg-font-lock-operator">+</span>l<span class="tuareg-font-lock-operator">}</span>
          <span class="keyword">done</span>
        <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
        <span class="tuareg-font-lock-operator">(</span>gamma <span class="tuareg-font-lock-operator">|*|</span> temp_m1<span class="tuareg-font-lock-operator">)</span> temp_m2<span class="tuareg-font-lock-operator">;</span>
        <span class="tuareg-font-lock-operator">(</span>temp_m2 <span class="tuareg-font-lock-operator">|*|</span> gamma<span class="tuareg-font-lock-operator">')</span> temp_m1<span class="tuareg-font-lock-operator">;</span>
        <span class="keyword">for</span> k <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> count <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
          <span class="keyword">for</span> l <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> count <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
            <span class="comment">(*printf "dfdx_bar_node.{%d,%d} &lt;- temp_m1.{%d, %d} : %g\n%!"
              (offset_i + k) (offset_j + l) k l temp_m1.{k,l};*)</span>
            dfdx_bar_node.<span class="tuareg-font-lock-operator">{</span>offset_i<span class="tuareg-font-lock-operator">+</span>k<span class="tuareg-font-lock-operator">,</span> offset_j<span class="tuareg-font-lock-operator">+</span>l<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> temp_m1.<span class="tuareg-font-lock-operator">{</span>k<span class="tuareg-font-lock-operator">,</span>l<span class="tuareg-font-lock-operator">}</span>
          <span class="keyword">done</span>
        <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
      <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    dfdx_bar_node
      
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">solve_nonlinear</span><span class="variable-name"> solver t </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">maxiter</span><span class="tuareg-font-lock-operator">=</span>100 <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">epsabs</span><span class="tuareg-font-lock-operator">=</span>1e<span class="tuareg-font-lock-operator">-</span>7 
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">solver_method </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_multiroot</span>.<span class="type">Deriv</span>.NEWTON <span class="tuareg-font-lock-governing">in</span>
    <span class="comment">(* Create some intermediate vectors/matrices *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_node </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.total_size</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">f_node </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.total_size</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">f_bar_node </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.total_size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="function-name">f</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">x</span><span class="tuareg-font-lock-operator">:</span><span class="type">x_bar </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">y </span><span class="tuareg-font-lock-operator">=</span>
      <span class="comment">(* Y*X + F(X) - B *)</span>
      <span class="comment">(* First the hard part, computation of F(X) *)</span>
      <span class="comment">(* Step 1: convert last guess to node major ordering *)</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_bar_node </span><span class="tuareg-font-lock-operator">=</span> harmonic_to_node t x_bar <span class="tuareg-font-lock-governing">in</span>
      <span class="comment">(* Step 2: perform IFFT on each node --&gt; time domain waveforms *)</span>
      <span class="tuareg-font-lock-operator">(</span>t.idft_m <span class="tuareg-font-lock-operator">|*&gt;</span> x_bar_node<span class="tuareg-font-lock-operator">)</span> x_node<span class="tuareg-font-lock-operator">;</span>
      <span class="comment">(* Step 3: compute the nonlinear components *)</span>
      <span class="type">V</span>.set_zero f_node<span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_node</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span> node_to_harmonic t x_node <span class="tuareg-font-lock-governing">in</span> <span class="comment">(* groups things correctly *)</span>
      <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.sample_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span> <span class="comment">(* for each time point *)</span> 
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">offset </span><span class="tuareg-font-lock-operator">=</span> i <span class="tuareg-font-lock-operator">*</span> t.circuit_size <span class="tuareg-font-lock-governing">in</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_node</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name">_sub </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.subvector x_node<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">~</span><span class="variable-name">off</span><span class="tuareg-font-lock-operator">:</span><span class="type">offset </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">len</span><span class="tuareg-font-lock-operator">:</span><span class="type">t.circuit_size</span>
        <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">f_node_sub </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.subvector f_node <span class="tuareg-font-lock-operator">~</span><span class="variable-name">off</span><span class="tuareg-font-lock-operator">:</span><span class="type">offset </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">len</span><span class="tuareg-font-lock-operator">:</span><span class="type">t.circuit_size </span><span class="tuareg-font-lock-governing">in</span>
        <span class="type">Solver</span>.apply_nonlinear_functions solver <span class="tuareg-font-lock-operator">~</span><span class="variable-name">x</span><span class="tuareg-font-lock-operator">:</span><span class="type">x_node</span><span class="tuareg-font-lock-operator">'</span><span class="type">_sub </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">y</span><span class="tuareg-font-lock-operator">:</span><span class="type">f_node_sub</span><span class="tuareg-font-lock-operator">;</span>
      <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">f_node </span><span class="tuareg-font-lock-operator">=</span> harmonic_to_node t f_node <span class="tuareg-font-lock-governing">in</span> <span class="comment">(* ungroup things back *)</span>
      <span class="comment">(* Step 4: perform FFT on each node *)</span>
      <span class="tuareg-font-lock-operator">(</span>t.dft_m <span class="tuareg-font-lock-operator">|*&gt;</span> f_node<span class="tuareg-font-lock-operator">)</span> f_bar_node<span class="tuareg-font-lock-operator">;</span>
      <span class="comment">(* Step 5: reorder to harmonic-major form *)</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">f_bar </span><span class="tuareg-font-lock-operator">=</span> node_to_harmonic t f_bar_node <span class="tuareg-font-lock-governing">in</span>
      <span class="comment">(* Final Computations *)</span>
      <span class="tuareg-font-lock-operator">(</span>t.y_bar <span class="tuareg-font-lock-operator">|*&gt;</span> x_bar<span class="tuareg-font-lock-operator">)</span> y<span class="tuareg-font-lock-operator">;</span>  <span class="comment">(* y &lt;- Y * X *)</span>
      <span class="type">V</span>.add y f_bar<span class="tuareg-font-lock-operator">;</span>          <span class="comment">(* Y &lt;- Y + F *)</span>
      <span class="type">V</span>.sub y t.b_bar<span class="tuareg-font-lock-operator">;</span>        <span class="comment">(* Y &lt;- Y - B *)</span>

    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">df</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">x</span><span class="tuareg-font-lock-operator">:</span><span class="type">x_bar </span><span class="tuareg-font-lock-operator">~</span>j <span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">count </span><span class="tuareg-font-lock-operator">=</span> 2 <span class="tuareg-font-lock-operator">*</span> t.harmonics<span class="tuareg-font-lock-operator">+</span>1 <span class="tuareg-font-lock-governing">in</span>
      <span class="comment">(* Y + dF(x)/dX *)</span>
      <span class="comment">(* Step 1: convert last guess to node major ordering *)</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_bar_node </span><span class="tuareg-font-lock-operator">=</span> harmonic_to_node t x_bar <span class="tuareg-font-lock-governing">in</span>
      <span class="comment">(* Step 2: perform IFFT on each node --&gt; time domain samples *)</span>
      <span class="tuareg-font-lock-operator">(</span>t.idft_m <span class="tuareg-font-lock-operator">|*&gt;</span> x_bar_node<span class="tuareg-font-lock-operator">)</span> x_node<span class="tuareg-font-lock-operator">;</span>
      <span class="comment">(* Step 3: compute the partial derivatives *)</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">dfdx </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.total_size t.total_size </span><span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_node</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span> node_to_harmonic t x_node <span class="tuareg-font-lock-governing">in</span> <span class="comment">(* groups things correctly *)</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">temp_m </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. t.circuit_size t.circuit_size </span><span class="tuareg-font-lock-governing">in</span>
      <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> count <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span> <span class="comment">(* for each sample/time point *)</span>
        <span class="type">M</span>.set_zero temp_m<span class="tuareg-font-lock-operator">;</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">offset </span><span class="tuareg-font-lock-operator">=</span> i <span class="tuareg-font-lock-operator">*</span> t.circuit_size <span class="tuareg-font-lock-governing">in</span>
        <span class="comment">(* x_node'_sub is the vector of circuit values at time ti *)</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_node</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name">_sub </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.subvector x_node<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">~</span><span class="variable-name">off</span><span class="tuareg-font-lock-operator">:</span><span class="type">offset </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">len</span><span class="tuareg-font-lock-operator">:</span><span class="type">t.circuit_size </span><span class="tuareg-font-lock-governing">in</span>
        <span class="type">Solver</span>.apply_nonlinear_derivatives solver <span class="tuareg-font-lock-operator">~</span><span class="variable-name">x</span><span class="tuareg-font-lock-operator">:</span><span class="type">x_node</span><span class="tuareg-font-lock-operator">'</span><span class="type">_sub </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">j</span><span class="tuareg-font-lock-operator">:</span><span class="type">temp_m</span><span class="tuareg-font-lock-operator">;</span>
        <span class="keyword">for</span> j <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.circuit_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
          <span class="keyword">for</span> k <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.circuit_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
            <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">row </span><span class="tuareg-font-lock-operator">=</span> j <span class="tuareg-font-lock-operator">*</span> count <span class="tuareg-font-lock-operator">+</span> i
            <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">col </span><span class="tuareg-font-lock-operator">=</span> k <span class="tuareg-font-lock-operator">*</span> count <span class="tuareg-font-lock-operator">+</span> i <span class="tuareg-font-lock-governing">in</span>
            <span class="comment">(*printf "dfdx.{%d,%d} &lt;- j.{%d,%d} (%g)\n%!" row col j k temp_m.{j,k};*)</span>
            dfdx.<span class="tuareg-font-lock-operator">{</span>row<span class="tuareg-font-lock-operator">,</span>col<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> temp_m.<span class="tuareg-font-lock-operator">{</span>j<span class="tuareg-font-lock-operator">,</span>k<span class="tuareg-font-lock-operator">}</span>
          <span class="keyword">done</span>
        <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
      <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">dfdx_bar_node </span><span class="tuareg-font-lock-operator">=</span> apply_gamma_gamma<span class="tuareg-font-lock-operator">'</span> t dfdx <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">temp_m </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create t.total_size t.total_size
      <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">dfdx_bar </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create t.total_size t.total_size <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>t.permut_m<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">|*|</span> dfdx_bar_node<span class="tuareg-font-lock-operator">)</span> temp_m<span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-operator">(</span>temp_m <span class="tuareg-font-lock-operator">|*|</span> t.permut_m<span class="tuareg-font-lock-operator">)</span> dfdx_bar<span class="tuareg-font-lock-operator">;</span>
      <span class="type">M</span>.memcpy <span class="tuareg-font-lock-operator">~</span><span class="variable-name">src</span><span class="tuareg-font-lock-operator">:</span><span class="type">t.y_bar </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">dst</span><span class="tuareg-font-lock-operator">:</span><span class="type">j</span><span class="tuareg-font-lock-operator">;</span>
      <span class="type">M</span>.add j dfdx_bar<span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="function-name">fdf</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">x </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">y </span><span class="tuareg-font-lock-operator">~</span>j <span class="tuareg-font-lock-operator">=</span>
      f <span class="tuareg-font-lock-operator">~</span>x <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">y</span><span class="tuareg-font-lock-operator">;</span>
      df <span class="tuareg-font-lock-operator">~</span>x <span class="tuareg-font-lock-operator">~</span>j <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">gf </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>
      <span class="type">Gsl_fun</span>.multi_f <span class="tuareg-font-lock-operator">=</span> f<span class="tuareg-font-lock-operator">;</span>
      <span class="type">Gsl_fun</span>.multi_df <span class="tuareg-font-lock-operator">=</span> df<span class="tuareg-font-lock-operator">;</span>
      <span class="type">Gsl_fun</span>.multi_fdf <span class="tuareg-font-lock-operator">=</span> fdf<span class="tuareg-font-lock-operator">;</span> <span class="tuareg-font-lock-operator">}</span>
    <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">solv </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_multiroot</span>.<span class="type">Deriv</span>.make solver_method t.total_size gf t.x_bar <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="tuareg-font-lock-governing">rec</span> <span class="function-name">proc</span><span class="variable-name"> iter </span><span class="tuareg-font-lock-operator">=</span>
      <span class="type">Gsl_multiroot</span>.<span class="type">Deriv</span>.iterate solv<span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">status </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_multiroot</span>.<span class="type">Deriv</span>.test_residual solv epsabs <span class="tuareg-font-lock-governing">in</span>
      <span class="keyword">match</span> status <span class="keyword">with</span>
        <span class="tuareg-font-lock-operator">|</span> <span class="constant">true</span> <span class="tuareg-font-lock-operator">-&gt;</span> Converged
        <span class="tuareg-font-lock-operator">|</span> <span class="constant">false</span> <span class="keyword">when</span> iter <span class="tuareg-font-lock-operator">&gt;=</span> maxiter <span class="tuareg-font-lock-operator">-&gt;</span> IterationLimitExceeded
        <span class="tuareg-font-lock-operator">|</span> <span class="constant">false</span> <span class="tuareg-font-lock-operator">-&gt;</span> proc <span class="tuareg-font-lock-operator">(</span>succ iter<span class="tuareg-font-lock-operator">)</span>
    <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">status </span><span class="tuareg-font-lock-operator">=</span> proc 1 <span class="tuareg-font-lock-governing">in</span>
    <span class="type">Gsl_multiroot</span>.<span class="type">Deriv</span>.get_state solv <span class="tuareg-font-lock-operator">~</span><span class="variable-name">x</span><span class="tuareg-font-lock-operator">:</span><span class="type">t.x_bar </span><span class="tuareg-font-lock-operator">();</span>
    status


  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">set_source_vector</span><span class="variable-name"> solver </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">b_bar </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">alpha </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">circuitSize </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Solver</span>.size solver <span class="tuareg-font-lock-governing">in</span>
    <span class="comment">(* First, lets retrieve the DC components *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">b_vec </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Solver</span>.get_b_vec solver <span class="tuareg-font-lock-operator">(</span>`DC<span class="tuareg-font-lock-operator">(</span>0<span class="tuareg-font-lock-operator">,</span>0.<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> <span class="tuareg-font-lock-operator">(</span><span class="type">V</span>.length b_vec<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      b_bar.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> b_vec.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">};</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    <span class="comment">(* Second, the REAL (cosine) terms of the AC sources *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">b_vec_real </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span><span class="type">Solver</span>.get_b_vec solver `AC_REAL<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> <span class="tuareg-font-lock-operator">(</span><span class="type">V</span>.length b_vec<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      b_bar.<span class="tuareg-font-lock-operator">{</span>i <span class="tuareg-font-lock-operator">+</span> circuitSize<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> alpha <span class="tuareg-font-lock-operator">*.</span> b_vec_real.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">};</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    <span class="comment">(* Finally, the IMAG (sine) terms of the AC sources *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">b_vec_imag </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span><span class="type">Solver</span>.get_b_vec solver `AC_IMAG<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> <span class="tuareg-font-lock-operator">(</span><span class="type">V</span>.length b_vec<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      b_bar.<span class="tuareg-font-lock-operator">{</span>i <span class="tuareg-font-lock-operator">+</span> 2<span class="tuareg-font-lock-operator">*</span>circuitSize<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> alpha <span class="tuareg-font-lock-operator">*.</span> b_vec_imag.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">};</span>
    <span class="keyword">done</span>
      
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">create solver </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">xinit </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">harmonics </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">w </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">xinit </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.of_array xinit <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">circuitSize </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Solver</span>.size solver <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">total_size </span><span class="tuareg-font-lock-operator">=</span> circuitSize <span class="tuareg-font-lock-operator">*</span> <span class="tuareg-font-lock-operator">(</span> 2 <span class="tuareg-font-lock-operator">*</span> harmonics <span class="tuareg-font-lock-operator">+</span> 1 <span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="comment">(* Construct the permutation and permutation transform matrices *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">permut </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. total_size total_size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">permut</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. total_size total_size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> total_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">index </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>i <span class="tuareg-font-lock-operator">*</span> circuitSize<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">index </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>index <span class="tuareg-font-lock-operator">/</span> total_size<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">+</span> <span class="tuareg-font-lock-operator">(</span>index <span class="tuareg-font-lock-operator">mod</span> total_size<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
      permut.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">,</span>index<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> 1.<span class="tuareg-font-lock-operator">;</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    <span class="type">M</span>.transpose permut<span class="tuareg-font-lock-operator">'</span> permut<span class="tuareg-font-lock-operator">;</span>
    <span class="comment">(* Ask for the y_bar matrix to be calculated *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">y_bar </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Solver</span>.get_y_bar_matrix solver <span class="tuareg-font-lock-operator">~</span>harmonics <span class="tuareg-font-lock-operator">~</span>w <span class="tuareg-font-lock-governing">in</span>
    <span class="comment">(* Create the source b_bar vector *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">b_bar </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. total_size </span><span class="tuareg-font-lock-governing">in</span>
    set_source_vector solver <span class="tuareg-font-lock-operator">~</span>b_bar <span class="tuareg-font-lock-operator">~</span><span class="variable-name">alpha</span><span class="tuareg-font-lock-operator">:</span><span class="type">1.</span><span class="tuareg-font-lock-operator">;</span>
    <span class="comment">(* Create the x_bar initial vector *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_bar </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. total_size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> <span class="tuareg-font-lock-operator">(</span><span class="type">V</span>.length xinit<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      x_bar.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> xinit.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">}</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    <span class="comment">(* Create the IDFTT, and DFT matrix *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">idft_m </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. total_size total_size </span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">dft_m </span><span class="tuareg-font-lock-operator">=</span> <span class="type">M</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">0. total_size total_size</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">gamma</span><span class="tuareg-font-lock-operator">'</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Dft</span>.gamma<span class="tuareg-font-lock-operator">'</span> <span class="tuareg-font-lock-operator">(</span>2<span class="tuareg-font-lock-operator">*</span>harmonics <span class="tuareg-font-lock-operator">+</span> 1<span class="tuareg-font-lock-operator">)</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">gamma </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Dft</span>.gamma <span class="tuareg-font-lock-operator">(</span>2<span class="tuareg-font-lock-operator">*</span>harmonics <span class="tuareg-font-lock-operator">+</span> 1<span class="tuareg-font-lock-operator">)</span><span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> circuitSize <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">shift </span><span class="tuareg-font-lock-operator">=</span> i <span class="tuareg-font-lock-operator">*</span> <span class="tuareg-font-lock-operator">(</span>2 <span class="tuareg-font-lock-operator">*</span> harmonics <span class="tuareg-font-lock-operator">+</span> 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
      blit gamma<span class="tuareg-font-lock-operator">'</span> shift shift idft_m<span class="tuareg-font-lock-operator">;</span>
      blit gamma shift shift dft_m<span class="tuareg-font-lock-operator">;</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">t </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span> circuit_size   <span class="tuareg-font-lock-operator">=</span> circuitSize<span class="tuareg-font-lock-operator">;</span>
              sample_size    <span class="tuareg-font-lock-operator">=</span> 2 <span class="tuareg-font-lock-operator">*</span> harmonics <span class="tuareg-font-lock-operator">+</span> 1<span class="tuareg-font-lock-operator">;</span>
              harmonics  <span class="tuareg-font-lock-operator">=</span> harmonics<span class="tuareg-font-lock-operator">;</span>
              total_size     <span class="tuareg-font-lock-operator">=</span> total_size<span class="tuareg-font-lock-operator">;</span>
              base_freq      <span class="tuareg-font-lock-operator">=</span> w<span class="tuareg-font-lock-operator">;</span>
              permut_m       <span class="tuareg-font-lock-operator">=</span> permut<span class="tuareg-font-lock-operator">;</span>
              permut_m<span class="tuareg-font-lock-operator">'</span>      <span class="tuareg-font-lock-operator">=</span> permut<span class="tuareg-font-lock-operator">';</span>
              idft_m         <span class="tuareg-font-lock-operator">=</span> idft_m<span class="tuareg-font-lock-operator">;</span>
              dft_m          <span class="tuareg-font-lock-operator">=</span> dft_m<span class="tuareg-font-lock-operator">;</span>
              y_bar          <span class="tuareg-font-lock-operator">=</span> y_bar<span class="tuareg-font-lock-operator">;</span>
              b_bar          <span class="tuareg-font-lock-operator">=</span> b_bar<span class="tuareg-font-lock-operator">;</span>
              x_bar          <span class="tuareg-font-lock-operator">=</span> x_bar<span class="tuareg-font-lock-operator">;</span>
              x_init         <span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.copy xinit<span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="type">Solver</span>.print solver<span class="tuareg-font-lock-operator">;</span>
    <span class="comment">(*print t;*)</span>
    t
<span class="comment">
</span>  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">dump_results</span><span class="variable-name"> t </span><span class="tuareg-font-lock-operator">=</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.sample_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      printf <span class="string">"-- %d th Harmonic -- \n%!"</span> i<span class="tuareg-font-lock-operator">;</span>
      <span class="keyword">for</span> j <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.circuit_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
        <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">index </span><span class="tuareg-font-lock-operator">=</span> i <span class="tuareg-font-lock-operator">*</span> t.circuit_size <span class="tuareg-font-lock-operator">+</span> j <span class="tuareg-font-lock-governing">in</span>
        printf <span class="string">"xbar(%d) = %g\n"</span> j t.x_bar.<span class="tuareg-font-lock-operator">{</span>index<span class="tuareg-font-lock-operator">}</span>
      <span class="keyword">done</span>
    <span class="keyword">done</span>

  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">ratio_threshold </span><span class="tuareg-font-lock-operator">=</span> 1e<span class="tuareg-font-lock-operator">-</span>12
  <span class="keyword">exception</span> <span class="variable-name">ConvergenceFailed</span> <span class="tuareg-font-lock-operator">of</span> string

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">solve_with_stepping</span><span class="variable-name"> t solver </span><span class="tuareg-font-lock-operator">=</span>
    info <span class="string">"HB: starting source stepping"</span><span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">num_steps </span><span class="tuareg-font-lock-operator">=</span> 50 <span class="tuareg-font-lock-governing">in</span>
    <span class="comment">(* Set the x_bar initial vector *)</span>
    <span class="type">V</span>.set_zero t.x_bar<span class="tuareg-font-lock-operator">;</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> <span class="tuareg-font-lock-operator">(</span><span class="type">V</span>.length t.x_init<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      t.x_bar.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> t.x_init.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">}</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> num_steps <span class="keyword">do</span>
      printf <span class="string">".%!"</span><span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">alpha </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float i<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>float num_steps<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
      set_source_vector solver <span class="tuareg-font-lock-operator">~</span><span class="variable-name">b_bar</span><span class="tuareg-font-lock-operator">:</span><span class="type">t.b_bar </span><span class="tuareg-font-lock-operator">~</span>alpha<span class="tuareg-font-lock-operator">;</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">result </span><span class="tuareg-font-lock-operator">=</span> solve_nonlinear solver t <span class="tuareg-font-lock-governing">in</span>
      <span class="keyword">match</span> result <span class="keyword">with</span>
        <span class="tuareg-font-lock-operator">|</span> Converged <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">()</span>
        <span class="tuareg-font-lock-operator">|</span> IterationLimitExceeded <span class="tuareg-font-lock-operator">-&gt;</span>
            <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">s </span><span class="tuareg-font-lock-operator">=</span> sprintf <span class="string">"HB source stepping failed at alpha=%g\n%!"</span> alpha <span class="tuareg-font-lock-governing">in</span>
            <span class="keyword">raise</span> <span class="tuareg-font-lock-operator">(</span>ConvergenceFailed s<span class="tuareg-font-lock-operator">)</span>
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    info <span class="string">"HB: source stepping finished"</span>

  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">store_results</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">name t </span><span class="tuareg-font-lock-operator">(</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">recorder</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">=</span>
    <span class="comment">(* Check the answer
       - for each node, compare the magnitude of the highest
       component to the fundamental and see if exceeds our threshold *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">ratios </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.create t.circuit_size <span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.circuit_size <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w0_real </span><span class="tuareg-font-lock-operator">=</span> t.x_bar.<span class="tuareg-font-lock-operator">{</span> t.circuit_size <span class="tuareg-font-lock-operator">+</span> i <span class="tuareg-font-lock-operator">}</span>
      <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">w0_imag </span><span class="tuareg-font-lock-operator">=</span> t.x_bar.<span class="tuareg-font-lock-operator">{</span> <span class="tuareg-font-lock-operator">(</span>t.circuit_size <span class="tuareg-font-lock-operator">*</span> 2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">+</span> i <span class="tuareg-font-lock-operator">}</span>
      <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">wn_real </span><span class="tuareg-font-lock-operator">=</span> t.x_bar.<span class="tuareg-font-lock-operator">{</span> <span class="tuareg-font-lock-operator">(</span>t.circuit_size <span class="tuareg-font-lock-operator">*</span> <span class="tuareg-font-lock-operator">(</span>t.harmonics<span class="tuareg-font-lock-operator">*</span>2 <span class="tuareg-font-lock-operator">-</span> 1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">+</span> i <span class="tuareg-font-lock-operator">}</span>
      <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">wn_imag </span><span class="tuareg-font-lock-operator">=</span> t.x_bar.<span class="tuareg-font-lock-operator">{</span> <span class="tuareg-font-lock-operator">(</span>t.circuit_size <span class="tuareg-font-lock-operator">*</span> <span class="tuareg-font-lock-operator">(</span>t.harmonics<span class="tuareg-font-lock-operator">*</span>2<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">+</span> i <span class="tuareg-font-lock-operator">}</span>
      <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">ratio </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.norm <span class="tuareg-font-lock-operator">{</span>re<span class="tuareg-font-lock-operator">=</span>wn_real<span class="tuareg-font-lock-operator">;</span> im<span class="tuareg-font-lock-operator">=</span>wn_imag<span class="tuareg-font-lock-operator">})</span> <span class="tuareg-font-lock-operator">/.</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.norm <span class="tuareg-font-lock-operator">{</span>re<span class="tuareg-font-lock-operator">=</span>w0_real<span class="tuareg-font-lock-operator">;</span> im<span class="tuareg-font-lock-operator">=</span>w0_imag<span class="tuareg-font-lock-operator">})</span> <span class="tuareg-font-lock-governing">in</span>
      ratios.<span class="tuareg-font-lock-operator">{</span>i<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> <span class="keyword">match</span> classify_float ratio <span class="keyword">with</span>
        <span class="tuareg-font-lock-operator">|</span> FP_normal <span class="tuareg-font-lock-operator">-&gt;</span> ratio
        <span class="tuareg-font-lock-operator">|</span> FP_nan <span class="tuareg-font-lock-operator">-&gt;</span> 0.
        <span class="tuareg-font-lock-operator">|</span> FP_infinite <span class="tuareg-font-lock-operator">-&gt;</span> warn <span class="string">"Got an infinite ratio!!!"</span><span class="tuareg-font-lock-operator">;</span> 0.
        <span class="tuareg-font-lock-operator">|</span> _ <span class="tuareg-font-lock-operator">-&gt;</span> 0.
    <span class="keyword">done</span><span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">max_ratio </span><span class="tuareg-font-lock-operator">=</span> <span class="type">V</span>.max ratios <span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">if</span> max_ratio <span class="tuareg-font-lock-operator">&gt;</span> ratio_threshold <span class="keyword">then</span> <span class="tuareg-font-lock-governing">begin</span>
      warn <span class="string">"Ratio of w[n] to w[1] exceeds threshold: %g &gt; %g"</span>
        max_ratio ratio_threshold<span class="tuareg-font-lock-operator">;</span>
      warn <span class="string">"You should run the simulation with more harmonics!!!"</span>
    <span class="tuareg-font-lock-governing">end</span><span class="tuareg-font-lock-operator">;</span>
    debug <span class="string">"Max Ratio: %g"</span> <span class="tuareg-font-lock-operator">(</span><span class="type">V</span>.max ratios<span class="tuareg-font-lock-operator">);</span>
    <span class="comment">(* record the answer *)</span>
    r<span class="tuareg-font-lock-operator">#</span>append_complex name 0. <span class="tuareg-font-lock-operator">(</span><span class="keyword">fun</span> <span class="variable-name">j </span><span class="tuareg-font-lock-operator">-&gt;</span>
      <span class="tuareg-font-lock-operator">{</span>re<span class="tuareg-font-lock-operator">=</span>t.x_bar.<span class="tuareg-font-lock-operator">{</span>j<span class="tuareg-font-lock-operator">};</span> im<span class="tuareg-font-lock-operator">=</span>0.<span class="tuareg-font-lock-operator">});</span>
    <span class="keyword">for</span> i <span class="tuareg-font-lock-operator">=</span> 0 <span class="keyword">to</span> t.harmonics <span class="tuareg-font-lock-operator">-</span> 1 <span class="keyword">do</span>
      r<span class="tuareg-font-lock-operator">#</span>append_complex name <span class="tuareg-font-lock-operator">((</span>float <span class="tuareg-font-lock-operator">(</span>i<span class="tuareg-font-lock-operator">+</span>1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">*.</span> t.base_freq<span class="tuareg-font-lock-operator">)</span>
        <span class="tuareg-font-lock-operator">(</span><span class="keyword">fun</span> <span class="variable-name">j </span><span class="tuareg-font-lock-operator">-&gt;</span>
          <span class="tuareg-font-lock-operator">{</span>re<span class="tuareg-font-lock-operator">=</span>t.x_bar.<span class="tuareg-font-lock-operator">{(</span>2<span class="tuareg-font-lock-operator">*</span>i<span class="tuareg-font-lock-operator">+</span>1<span class="tuareg-font-lock-operator">)*</span>t.circuit_size <span class="tuareg-font-lock-operator">+</span> j<span class="tuareg-font-lock-operator">};</span>
           im<span class="tuareg-font-lock-operator">=</span>t.x_bar.<span class="tuareg-font-lock-operator">{(</span>2<span class="tuareg-font-lock-operator">*</span>i<span class="tuareg-font-lock-operator">+</span>2<span class="tuareg-font-lock-operator">)*</span>t.circuit_size <span class="tuareg-font-lock-operator">+</span> j<span class="tuareg-font-lock-operator">}})</span>
    <span class="keyword">done</span>
      
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">solve</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">name t solver r </span><span class="tuareg-font-lock-operator">=</span>
    info <span class="string">"Performing HB analysis (%s)"</span> name<span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">result </span><span class="tuareg-font-lock-operator">=</span> solve_nonlinear solver t <span class="tuareg-font-lock-governing">in</span>
    <span class="keyword">match</span> result <span class="keyword">with</span>
      <span class="tuareg-font-lock-operator">|</span> Converged <span class="tuareg-font-lock-operator">-&gt;</span>
          info <span class="string">"HB analysis complete. Storing results."</span><span class="tuareg-font-lock-operator">;</span>
          store_results <span class="tuareg-font-lock-operator">~</span>name t r
      <span class="tuareg-font-lock-operator">|</span> IterationLimitExceeded <span class="tuareg-font-lock-operator">-&gt;</span>
          warn <span class="string">"HB analysis: failed to converge"</span><span class="tuareg-font-lock-operator">;</span>
          info <span class="string">"Starting source stepping algorithm"</span><span class="tuareg-font-lock-operator">;</span>
<span class="string">          solve_with_stepping t solver;
</span>          store_results <span class="tuareg-font-lock-operator">~</span>name t r

<span class="string">  let solve_linear ~name t r =
</span>    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">mna_matrix </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_matrix</span>.copy t.y_bar <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">answer </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_linalg</span>.solve_LU <span class="tuareg-font-lock-operator">(</span>`M mna_matrix<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(</span>`V t.b_bar<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="type">V</span>.memcpy <span class="tuareg-font-lock-operator">~</span><span class="variable-name">src</span><span class="tuareg-font-lock-operator">:(</span><span class="type">V.of_array answer</span><span class="tuareg-font-lock-operator">)</span><span class="type"> </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">dst</span><span class="tuareg-font-lock-operator">:</span><span class="type">t.x_bar</span><span class="tuareg-font-lock-operator">;</span>
    warn <span class="string">"results are not being stored"</span><span class="tuareg-font-lock-operator">;</span>
    dump_results t
<span class="string">  
</span><span class="tuareg-font-lock-governing">end</span><span class="tuareg-font-lock-operator">;;</span></pre></p>




<h3><a name="sec5" id="sec5"></a>
Part 3: Testing</h3>

<ul>
<li>the DC analysis (which was always performed prior to HB analysis)
required source stepping in order to converge</li>
<li>for the HB anlaysis, only the cases of 100mV and 500mV required source
stepping</li>
<li>I chose an arbitrary ratio of 1e-3 for the highest harmonic to the
fundamental.  In all cases except the 100mV and 500mV case, I was
able to achieve this ratio by increasing the number of samples.  I
feel relatively confident that I could have achieved this ratio for
these cases, if I was willing to be a bit more patient with the
run-time.  Unfortunately, the CPU fans on my laptop are not running
properly, so I was hesitant to the run the CPU full-out for a long
time.</li>
</ul>

<h4>Results</h4>

<p class="first">The results from running my simulation engine are shown below.  I've
also included a &quot;Max Ratio&quot; column which shows the ratio of the
magnitude of the highest harmonic to the fundamental.  Clearly, I need
even more harmonics for the 100 mV and 500 mV amplitudes.  However,
the runtimes were increasing and I did not want to burn out my CPUs.</p>

<table class="muse-table" border="2" cellpadding="5">
  <thead>
    <tr>
      <th>Amplitude</th>
      <th>M</th>
      <th>Max Ratio</th>
      <th>DC shift</th>
      <th>Gain</th>
      <th>2nd HD</th>
      <th>3rd HD</th>
      <th>THD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1 mV</td>
      <td>5</td>
      <td>3.327e-11</td>
      <td>0</td>
      <td>37.462</td>
      <td>-50.0646</td>
      <td>-108.457</td>
      <td>-122.665</td>
    </tr>
    <tr>
      <td>5 mV</td>
      <td>5</td>
      <td>2.193e-8</td>
      <td>0</td>
      <td>37.455</td>
      <td>-36.088</td>
      <td>-80.5149</td>
      <td>-80.7412</td>
    </tr>
    <tr>
      <td>10 mV</td>
      <td>5</td>
      <td>1.036e-6</td>
      <td>0</td>
      <td>37.424</td>
      <td>-30.025</td>
      <td>-68.62</td>
      <td>-62.626</td>
    </tr>
    <tr>
      <td>50 mV</td>
      <td>7</td>
      <td>3.411e-6</td>
      <td>0</td>
      <td>36.389</td>
      <td>-15.232</td>
      <td>-47.38</td>
      <td>-20.087</td>
    </tr>
    <tr>
      <td>100 mV</td>
      <td>20</td>
      <td>0.0017</td>
      <td>0</td>
      <td>33.446</td>
      <td>-10.444</td>
      <td>-26.54</td>
      <td>-6.466</td>
    </tr>
    <tr>
      <td>500 mV</td>
      <td>20</td>
      <td>0.018</td>
      <td>0</td>
      <td>19.995</td>
      <td>-10.485</td>
      <td>-13.682</td>
      <td>1.6756</td>
    </tr>
  </tbody>
</table>

<p>I've also included a graph showing the output signal when the input
amplitude is 500mV. The distortion is seen very clearly.  It is
obvious that the output is essentially railing due to biasing and
source voltage limitations.  Of course, this is the explanation for
requiring more and more harmonics for the higher input voltages.  The
distorted output signals requires many more harmonics in order to
capture its shape (it is almost a square pulse).</p>

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="400pt" height="400pt" viewBox="0 0 400 400" version="1.1">
<defs>
<g>
<symbol overflow="visible" id="glyph0-0">
<path style="stroke: none;" d="M 3.171875 -6.640625 C 2.671875 -6.640625 2.291656 -6.390625 2.03125 -5.890625 C 1.78125 -5.390625 1.65625 -4.640625 1.65625 -3.640625 C 1.65625 -2.640625 1.78125 -1.890625 2.03125 -1.390625 C 2.291656 -0.890625 2.671875 -0.640625 3.171875 -0.640625 C 3.692703 -0.640625 4.078125 -0.890625 4.328125 -1.390625 C 4.588531 -1.890625 4.71875 -2.640625 4.71875 -3.640625 C 4.71875 -4.640625 4.588531 -5.390625 4.328125 -5.890625 C 4.078125 -6.390625 3.692703 -6.640625 3.171875 -6.640625 Z M 3.171875 -7.421875 C 3.994781 -7.421875 4.619781 -7.098953 5.046875 -6.453125 C 5.484375 -5.807281 5.703125 -4.869781 5.703125 -3.640625 C 5.703125 -2.411453 5.484375 -1.473953 5.046875 -0.828125 C 4.619781 -0.182281 3.994781 0.140625 3.171875 0.140625 C 2.359375 0.140625 1.734375 -0.182281 1.296875 -0.828125 C 0.869781 -1.473953 0.65625 -2.411453 0.65625 -3.640625 C 0.65625 -4.869781 0.869781 -5.807281 1.296875 -6.453125 C 1.734375 -7.098953 2.359375 -7.421875 3.171875 -7.421875 Z M 3.171875 -7.421875 "/>
</symbol>
<symbol overflow="visible" id="glyph0-1">
<path style="stroke: none;" d="M 1.921875 -0.828125 L 5.359375 -0.828125 L 5.359375 0 L 0.734375 0 L 0.734375 -0.828125 C 1.109375 -1.213531 1.619781 -1.734375 2.265625 -2.390625 C 2.911453 -3.046875 3.317703 -3.46875 3.484375 -3.65625 C 3.796875 -4.010406 4.015625 -4.307281 4.140625 -4.546875 C 4.265625 -4.796875 4.328125 -5.041656 4.328125 -5.28125 C 4.328125 -5.666656 4.192703 -5.979156 3.921875 -6.21875 C 3.651031 -6.46875 3.296875 -6.59375 2.859375 -6.59375 C 2.546875 -6.59375 2.21875 -6.536453 1.875 -6.421875 C 1.541656 -6.317703 1.177078 -6.15625 0.78125 -5.9375 L 0.78125 -6.9375 C 1.177078 -7.09375 1.546875 -7.213531 1.890625 -7.296875 C 2.234375 -7.380203 2.552078 -7.421875 2.84375 -7.421875 C 3.59375 -7.421875 4.192703 -7.234375 4.640625 -6.859375 C 5.098953 -6.484375 5.328125 -5.979156 5.328125 -5.34375 C 5.328125 -5.041656 5.270828 -4.755203 5.15625 -4.484375 C 5.041656 -4.223953 4.838531 -3.911453 4.546875 -3.546875 C 4.463531 -3.453125 4.203125 -3.177078 3.765625 -2.71875 C 3.328125 -2.270828 2.713531 -1.640625 1.921875 -0.828125 Z M 1.921875 -0.828125 "/>
</symbol>
<symbol overflow="visible" id="glyph0-2">
<path style="stroke: none;" d="M 3.78125 -6.4375 L 1.296875 -2.546875 L 3.78125 -2.546875 L 3.78125 -6.4375 Z M 3.515625 -7.296875 L 4.765625 -7.296875 L 4.765625 -2.546875 L 5.796875 -2.546875 L 5.796875 -1.71875 L 4.765625 -1.71875 L 4.765625 0 L 3.78125 0 L 3.78125 -1.71875 L 0.484375 -1.71875 L 0.484375 -2.671875 L 3.515625 -7.296875 Z M 3.515625 -7.296875 "/>
</symbol>
<symbol overflow="visible" id="glyph0-3">
<path style="stroke: none;" d="M 0.484375 -3.140625 L 3.125 -3.140625 L 3.125 -2.34375 L 0.484375 -2.34375 L 0.484375 -3.140625 Z M 0.484375 -3.140625 "/>
</symbol>
</g>
</defs>
<g id="surface0">
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-0" x="37.976562" y="365"/>
</g>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-1" x="206.834473" y="365"/>
  <use xlink:href="#glyph0-0" x="213.196777" y="365"/>
</g>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-2" x="379.709473" y="365"/>
  <use xlink:href="#glyph0-0" x="386.071777" y="365"/>
</g>
<path style="fill: none; stroke-width: 1; stroke-linecap: square; stroke-linejoin: miter; stroke: rgb(56.078431%,61.568627%,41.568627%); opacity: 0.6;stroke-miterlimit: 10;" d="M 0.5 335 L 0.5 0.5 M 172.5 335 L 172.5 0.5 M 345.5 335 L 345.5 0.5 M 352.434082 -15 " transform="matrix(1,0,0,-1,40,350)"/>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-3" x="26.079102" y="315.851562"/>
  <use xlink:href="#glyph0-2" x="29.6875" y="315.851562"/>
</g>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-3" x="26.516602" y="234.789062"/>
  <use xlink:href="#glyph0-1" x="30.125" y="234.789062"/>
</g>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-0" x="29.953125" y="152.71875"/>
</g>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-1" x="30.375" y="71.789062"/>
</g>
<path style="fill: none; stroke-width: 1; stroke-linecap: square; stroke-linejoin: miter; stroke: rgb(56.078431%,61.568627%,41.568627%); opacity: 0.6;stroke-miterlimit: 10;" d="M 0.5 37.5 L 345 37.5 M 0.5 118.5 L 345 118.5 M 0.5 200.5 L 345 200.5 M 0.5 281.5 L 345 281.5 M -3.262695 278.210938 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(100%,0%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 0 0.044617 L 8.625 0.096771 L 17.25 0.195267 L 25.875 0.469757 L 34.5 1.759674 L 43.125 213.226425 L 51.75 325.315582 L 60.375 334.416916 L 69 334.919006 L 77.625 334.896713 L 86.25 334.928375 L 94.875 334.910416 L 103.5 334.920547 L 112.125 334.920288 L 120.75 334.915573 L 129.375 334.929077 L 138 334.911819 L 146.625 334.937851 L 155.25 334.907944 L 163.875 334.947418 L 172.5 334.902557 L 181.125 334.958923 L 189.75 334.893631 L 198.375 334.974686 L 207 334.877121 L 215.625 335 L 224.25 334.829208 L 232.875 334.79718 L 241.5 329.12056 L 250.125 269.751617 L 258.75 30.749603 L 267.375 0.532043 L 276 0.228638 L 284.625 0.105972 L 293.25 0.052643 L 301.875 0.021835 L 310.5 0.007858 L 319.125 0 L 327.75 0.000534 L 336.375 0.005142 L 345 0.019897 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 2; stroke-linecap: square; stroke-linejoin: miter; stroke: rgb(56.078431%,61.568627%,41.568627%); opacity: 1;stroke-miterlimit: 10;" d="M 0 0 L 0 335 M 0 0 L 345 0 " transform="matrix(1,0,0,-1,40,350)"/>
</g>
</svg>




<h4>Comments</h4>

<ul>
<li>the run-time increased significantly when the harmonic truncation
was increased in order to produce more accurate results</li>
<li>many more sampling points were required as soon as the input
amplitude was increased to a point where there was a lot of
distortion</li>
</ul>



<h3><a name="sec6" id="sec6"></a>
Part 4: Verification</h3>

<p class="first">Results from running ADS are shown in the table below.  For the most
part, they match the results from Part 3 very well with the following
exceptions:</p>

<ul>
<li>None of the THD numbers match.  I think this is a problem with my
THD equation in ADS.  I never had a chance to debug this fully
since I got my computer account working rather late to spend a lot
of time on it.</li>
<li>The results for the 2nd and 3rd order harmonic distortion diverge a
bit from my results for the cases of 100mV and 500mV input
amplitudes.  I did not find the required settings for controlling
the NR stopping criteria.  I suspect this may account for the
differences at these higher input levels.</li>
</ul>


<table class="muse-table" border="2" cellpadding="5">
  <thead>
    <tr>
      <th>Amplitude</th>
      <th>M</th>
      <th>DC Shift</th>
      <th>Gain</th>
      <th>2nd HD</th>
      <th>3rd HD</th>
      <th>THD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1mV</td>
      <td>5</td>
      <td>0</td>
      <td>37.46</td>
      <td>-50.064</td>
      <td>-108.465</td>
      <td>-23.120</td>
    </tr>
    <tr>
      <td>5 mV</td>
      <td>5</td>
      <td>0</td>
      <td>37.45</td>
      <td>-36.073</td>
      <td>-80.54</td>
      <td>-12.622</td>
    </tr>
    <tr>
      <td>10 mV</td>
      <td>5</td>
      <td>0</td>
      <td>37.42</td>
      <td>-30.019</td>
      <td>-68.626</td>
      <td>-14.408</td>
    </tr>
    <tr>
      <td>50 mV</td>
      <td>7</td>
      <td>0</td>
      <td>36.37</td>
      <td>-15.208</td>
      <td>-47.524</td>
      <td>17.918</td>
    </tr>
    <tr>
      <td>100 mV</td>
      <td>20</td>
      <td>0</td>
      <td>33.47</td>
      <td>-9.998</td>
      <td>-30.075</td>
      <td>25.987</td>
    </tr>
    <tr>
      <td>500 mV</td>
      <td>20</td>
      <td>0</td>
      <td>22.23</td>
      <td>-8.031</td>
      <td>-18.852</td>
      <td>29.163</td>
    </tr>
  </tbody>
</table>


<h3><a name="sec7" id="sec7"></a>
Part 5: Comparison</h3>

<p class="first">A graph showing the magnitude of V(out) for my program and for ADS is
shown below.  The x-axis is the input voltage and is not rendered
properly due to some buggy behavior in the Firefox SVG renderer.  The
&quot;circles&quot; are my program and the &quot;crosses&quot; are from ADS.  The results
almost match exactly except for the case of 500mV where there is a
slighly difference.</p>

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="400pt" height="400pt" viewBox="0 0 400 400" version="1.1">
<defs>
<g>
<symbol overflow="visible" id="glyph0-0">
<path style="stroke: none;" d="M 3.171875 -6.640625 C 2.671875 -6.640625 2.291656 -6.390625 2.03125 -5.890625 C 1.78125 -5.390625 1.65625 -4.640625 1.65625 -3.640625 C 1.65625 -2.640625 1.78125 -1.890625 2.03125 -1.390625 C 2.291656 -0.890625 2.671875 -0.640625 3.171875 -0.640625 C 3.692703 -0.640625 4.078125 -0.890625 4.328125 -1.390625 C 4.588531 -1.890625 4.71875 -2.640625 4.71875 -3.640625 C 4.71875 -4.640625 4.588531 -5.390625 4.328125 -5.890625 C 4.078125 -6.390625 3.692703 -6.640625 3.171875 -6.640625 Z M 3.171875 -7.421875 C 3.994781 -7.421875 4.619781 -7.098953 5.046875 -6.453125 C 5.484375 -5.807281 5.703125 -4.869781 5.703125 -3.640625 C 5.703125 -2.411453 5.484375 -1.473953 5.046875 -0.828125 C 4.619781 -0.182281 3.994781 0.140625 3.171875 0.140625 C 2.359375 0.140625 1.734375 -0.182281 1.296875 -0.828125 C 0.869781 -1.473953 0.65625 -2.411453 0.65625 -3.640625 C 0.65625 -4.869781 0.869781 -5.807281 1.296875 -6.453125 C 1.734375 -7.098953 2.359375 -7.421875 3.171875 -7.421875 Z M 3.171875 -7.421875 "/>
</symbol>
<symbol overflow="visible" id="glyph0-1">
<path style="stroke: none;" d="M 1.0625 -1.234375 L 2.09375 -1.234375 L 2.09375 0 L 1.0625 0 L 1.0625 -1.234375 Z M 1.0625 -1.234375 "/>
</symbol>
<symbol overflow="visible" id="glyph0-2">
<path style="stroke: none;" d="M 1.921875 -0.828125 L 5.359375 -0.828125 L 5.359375 0 L 0.734375 0 L 0.734375 -0.828125 C 1.109375 -1.213531 1.619781 -1.734375 2.265625 -2.390625 C 2.911453 -3.046875 3.317703 -3.46875 3.484375 -3.65625 C 3.796875 -4.010406 4.015625 -4.307281 4.140625 -4.546875 C 4.265625 -4.796875 4.328125 -5.041656 4.328125 -5.28125 C 4.328125 -5.666656 4.192703 -5.979156 3.921875 -6.21875 C 3.651031 -6.46875 3.296875 -6.59375 2.859375 -6.59375 C 2.546875 -6.59375 2.21875 -6.536453 1.875 -6.421875 C 1.541656 -6.317703 1.177078 -6.15625 0.78125 -5.9375 L 0.78125 -6.9375 C 1.177078 -7.09375 1.546875 -7.213531 1.890625 -7.296875 C 2.234375 -7.380203 2.552078 -7.421875 2.84375 -7.421875 C 3.59375 -7.421875 4.192703 -7.234375 4.640625 -6.859375 C 5.098953 -6.484375 5.328125 -5.979156 5.328125 -5.34375 C 5.328125 -5.041656 5.270828 -4.755203 5.15625 -4.484375 C 5.041656 -4.223953 4.838531 -3.911453 4.546875 -3.546875 C 4.463531 -3.453125 4.203125 -3.177078 3.765625 -2.71875 C 3.328125 -2.270828 2.713531 -1.640625 1.921875 -0.828125 Z M 1.921875 -0.828125 "/>
</symbol>
<symbol overflow="visible" id="glyph0-3">
<path style="stroke: none;" d="M 3.78125 -6.4375 L 1.296875 -2.546875 L 3.78125 -2.546875 L 3.78125 -6.4375 Z M 3.515625 -7.296875 L 4.765625 -7.296875 L 4.765625 -2.546875 L 5.796875 -2.546875 L 5.796875 -1.71875 L 4.765625 -1.71875 L 4.765625 0 L 3.78125 0 L 3.78125 -1.71875 L 0.484375 -1.71875 L 0.484375 -2.671875 L 3.515625 -7.296875 Z M 3.515625 -7.296875 "/>
</symbol>
</g>
</defs>
<g id="surface0">
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-0" x="170.37793" y="365"/>
  <use xlink:href="#glyph0-1" x="176.740234" y="365"/>
  <use xlink:href="#glyph0-2" x="179.918945" y="365"/>
</g>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-0" x="308.15918" y="365"/>
  <use xlink:href="#glyph0-1" x="314.521484" y="365"/>
  <use xlink:href="#glyph0-3" x="317.700195" y="365"/>
</g>
<path style="fill: none; stroke-width: 1; stroke-linecap: square; stroke-linejoin: miter; stroke: rgb(56.078431%,61.568627%,41.568627%); opacity: 0.6;stroke-miterlimit: 10;" d="M 137.5 335 L 137.5 0.5 M 275.5 335 L 275.5 0.5 M 284.0625 -15 " transform="matrix(1,0,0,-1,40,350)"/>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-2" x="30.375" y="225.789062"/>
</g>
<g style="fill: rgb(81.176471%,41.568627%,29.803922%); opacity: 1;">
  <use xlink:href="#glyph0-3" x="29.6875" y="93.851562"/>
</g>
<path style="fill: none; stroke-width: 1; stroke-linecap: square; stroke-linejoin: miter; stroke: rgb(56.078431%,61.568627%,41.568627%); opacity: 0.6;stroke-miterlimit: 10;" d="M 0.5 127.5 L 345 127.5 M 0.5 259.5 L 345 259.5 M -3.950195 256.148438 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(100%,0%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 3 0 C 3 4 -3 4 -3 0 C -3 -4 3 -4 3 0 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(100%,0%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 5.765533 19.756989 C 5.765533 23.756989 -0.234467 23.756989 -0.234467 19.756989 C -0.234467 15.756989 5.765533 15.756989 5.765533 19.756989 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(100%,0%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 9.222443 44.281052 C 9.222443 48.281052 3.222443 48.281052 3.222443 44.281052 C 3.222443 40.281052 9.222443 40.281052 9.222443 44.281052 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(100%,0%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 36.877762 213.538727 C 36.877762 217.538727 30.877762 217.538727 30.877762 213.538727 C 30.877762 209.538727 36.877762 209.538727 36.877762 213.538727 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(100%,0%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 71.446899 306.482422 C 71.446899 310.482422 65.446899 310.482422 65.446899 306.482422 C 65.446899 302.482422 71.446899 302.482422 71.446899 306.482422 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(100%,0%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 348 325.993057 C 348 329.993057 342 329.993057 342 325.993057 C 342 321.993057 348 321.993057 348 325.993057 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M -4 -3.978806 L 4 4.021194 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M -4 4.021194 L 4 -3.978806 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M -1.234467 15.756989 L 6.765533 23.756989 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M -1.234467 23.756989 L 6.765533 15.756989 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 2.222443 40.261185 L 10.222443 48.261185 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 2.222443 48.261185 L 10.222443 40.261185 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 29.877762 209.008911 L 37.877762 217.008911 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 29.877762 217.008911 L 37.877762 209.008911 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 64.446899 303.316895 L 72.446899 311.316895 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 64.446899 311.316895 L 72.446899 303.316895 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 341 331 L 349 339 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stroke: rgb(0%,100%,100%); opacity: 1;stroke-miterlimit: 10;" d="M 341 339 L 349 331 " transform="matrix(1,0,0,-1,40,350)"/>
<path style="fill: none; stroke-width: 2; stroke-linecap: square; stroke-linejoin: miter; stroke: rgb(56.078431%,61.568627%,41.568627%); opacity: 1;stroke-miterlimit: 10;" d="M 0 0 L 0 335 M 0 0 L 345 0 " transform="matrix(1,0,0,-1,40,350)"/>
</g>
</svg>




<h3><a name="sec8" id="sec8"></a>
Part 6: Future Work</h3>

<p class="first">Of course, there are a lot of things that I would like to spend more
time on:</p>

<ul>
<li>figure out the discrepancy in the results for the cases with a lot
of distortion</li>
<li>run with even more harmonics for the cases of 100mV and 500mV in
order to get more accurate results</li>
<li>debug the THD calculation in ADS in order to figure out what is
going on.  NOTE: I also tried the built-in routine &quot;thd_func&quot;,
however, this produced even more confusing results.</li>
<li>Both the HB and DC source stepping algorithms should be much more
sophisticated.  I would like to try adaptive step sizes.  Other
types of homotopy may be more appropriate and require less steps
(such as varying transistor gain)</li>
<li>automatic adjustment of the number of harmonics would be nice</li>
<li>there is a lot of duplicated calculation that should be cleaned up
and would make the simulation run much faster</li>
<li>I would like to experiment with algorithms other than standard
Newton Raphson</li>
<li>many more unit tests should be written</li>
<li>add a &quot;netlist&quot;/scripted front-end (easier for testing, debuggin,
generating results)</li>
</ul>




</body>
</html>
