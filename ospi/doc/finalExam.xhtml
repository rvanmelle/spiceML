<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN"
    "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd">
<?xml-stylesheet type="text/xsl" href="../etc/mathml.xsl"?>
<?xml-stylesheet href="#internalStyle" type="text/css"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

  <head>
    <title>OSPI</title>

<link href="../../doc-src/static/blueprint/screen.css" type="text/css" media="screen"/>
<link href="../../doc-src/static/blueprint/print.css" type="text/css" media="print"/>
    
    <style type="text/css">
    <![CDATA[
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .function-name {
        /* font-lock-function-name-face */
        color: #0000ff;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #a020f0;
      }
      .tuareg-font-lock-governing {
        /* tuareg-font-lock-governing-face */
        color: #0000ff;
        font-weight: bold;
      }
      .tuareg-font-lock-operator {
        /* tuareg-font-lock-operator-face */
        color: #a52a2a;
      }
      .comment {
        color: #FF0000;
      }
      .type {
        /* font-lock-type-face */
        color: #228b22;
      }
      .variable-name {
        /* font-lock-variable-name-face */
        color: #b8860b;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    ]]>
    </style>
    
  </head>
  
  <body>

    <div class="container">
      <div class="column span-14">
    
	
     
    



<h2>ELG7132D:  Final Exam</h2>

<h4>By: Reid van Melle</h4>


<h4>Student No: 5107751</h4>


<h4>Question #1</h4>

<p class="first">Submitted on paper.</p>


<h4>Question #2, Part a, b, c</h4>

<p class="first">Submitted on paper.</p>

<p>NOTE: I'm relatively certain that there is something in my derivation
of the kernels because when I tried to plot the results, only the
first order response was valid.  The other responses contained
overflow or nan errors.  When I examined things closer, some of the
kernels were returning numbers which were simply too small and I
believe causing underflow errors.  However, I think that my
calculations in the code are correct which means there is very likely
an error in the hand derivation.</p>

<p>I did not have time to debug this fully... obviously.</p>


<h4>Question #2, Part d</h4>

<p class="first">Here is the code the computes and plots the 1st, 2nd, and 3rd order
responses.  Only the first order response actually plots succesfully
and I'm pretty sure this is the wrong answer as well so I didn't
bother including the actual plot.</p>

<p>    <pre>
<span class="tuareg-font-lock-governing">let</span> <span class="function-name">rads_of_degrees</span><span class="variable-name"> x </span><span class="tuareg-font-lock-operator">=</span> 2. <span class="tuareg-font-lock-operator">*.</span> pi <span class="tuareg-font-lock-operator">*.</span> x

<span class="comment">(* Constants that we use through the routines here *)</span>
<span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w2</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> io</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> vt</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> rs</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> cpi</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> rload</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> beta</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> a1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> a2 </span><span class="tuareg-font-lock-operator">=</span>
  <span class="tuareg-font-lock-operator">(</span>rads_of_degrees 10e3<span class="tuareg-font-lock-operator">),</span> <span class="tuareg-font-lock-operator">(</span>rads_of_degrees 10.1e3<span class="tuareg-font-lock-operator">),</span> 1e<span class="tuareg-font-lock-operator">-</span>15<span class="tuareg-font-lock-operator">,</span> 25e<span class="tuareg-font-lock-operator">-</span>3<span class="tuareg-font-lock-operator">,</span> 50.<span class="tuareg-font-lock-operator">,</span>
  1e<span class="tuareg-font-lock-operator">-</span>12<span class="tuareg-font-lock-operator">,</span> 10e3<span class="tuareg-font-lock-operator">,</span> 100.<span class="tuareg-font-lock-operator">,</span> 1e<span class="tuareg-font-lock-operator">-</span>3<span class="tuareg-font-lock-operator">,</span> 1e<span class="tuareg-font-lock-operator">-</span>4<span class="tuareg-font-lock-operator">;;</span>

<span class="tuareg-font-lock-governing">let</span> <span class="function-name">frange</span><span class="variable-name"> start stop iter </span><span class="tuareg-font-lock-operator">=</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="tuareg-font-lock-governing">rec</span> <span class="function-name">generate</span><span class="variable-name"> cur </span><span class="tuareg-font-lock-operator">=</span>
    <span class="keyword">if</span> cur <span class="tuareg-font-lock-operator">&gt;</span> stop <span class="keyword">then</span> <span class="tuareg-font-lock-operator">[]</span> <span class="keyword">else</span> cur <span class="tuareg-font-lock-operator">::</span> <span class="tuareg-font-lock-operator">(</span>generate <span class="tuareg-font-lock-operator">(</span>cur <span class="tuareg-font-lock-operator">+.</span> iter<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">vals </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Array</span>.of_list <span class="tuareg-font-lock-operator">(</span>generate start<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-governing">in</span>
  farray_of_array vals

<span class="tuareg-font-lock-governing">let</span> <span class="function-name">plot_response</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">()</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">g1 </span><span class="tuareg-font-lock-operator">=</span> io <span class="tuareg-font-lock-operator">/.</span> vt
  <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">g2 </span><span class="tuareg-font-lock-operator">=</span> io <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>2. <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>vt <span class="tuareg-font-lock-operator">**</span> 2.<span class="tuareg-font-lock-operator">))</span>
  <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">g3 </span><span class="tuareg-font-lock-operator">=</span> io <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>6. <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>vt <span class="tuareg-font-lock-operator">**</span> 3.<span class="tuareg-font-lock-operator">))</span>
  <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">z_cpi</span><span class="variable-name"> w </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Complex</span>.inv <span class="tuareg-font-lock-operator">(</span>complex 0. <span class="tuareg-font-lock-operator">(</span>w <span class="tuareg-font-lock-operator">*.</span> cpi<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">z1</span><span class="variable-name"> w </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">term1 </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Complex</span>.inv <span class="tuareg-font-lock-operator">(</span>z_cpi w<span class="tuareg-font-lock-operator">)</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">term2 </span><span class="tuareg-font-lock-operator">=</span> complex g1 0. 
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">term3 </span><span class="tuareg-font-lock-operator">=</span> complex <span class="tuareg-font-lock-operator">(</span>1. <span class="tuareg-font-lock-operator">/.</span> rs<span class="tuareg-font-lock-operator">)</span> 0.
    <span class="tuareg-font-lock-governing">in</span>
    <span class="type">Complex</span>.inv <span class="tuareg-font-lock-operator">(</span>term1 <span class="tuareg-font-lock-operator">$+</span> term2 <span class="tuareg-font-lock-operator">$+</span> term3<span class="tuareg-font-lock-operator">)</span>
  <span class="tuareg-font-lock-governing">in</span> 
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">z2</span><span class="variable-name"> w </span><span class="tuareg-font-lock-operator">=</span> z1 w <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">coeff </span><span class="tuareg-font-lock-operator">=</span> complex <span class="tuareg-font-lock-operator">((-.</span>1.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> beta <span class="tuareg-font-lock-operator">*.</span> rload <span class="tuareg-font-lock-operator">*.</span> g1<span class="tuareg-font-lock-operator">)</span> 0. <span class="tuareg-font-lock-governing">in</span>
  <span class="comment">(* First, second, and third order kernerls *)</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">kernel1</span><span class="variable-name"> w </span><span class="tuareg-font-lock-operator">=</span> coeff <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>z1 w<span class="tuareg-font-lock-operator">)</span>
  <span class="tuareg-font-lock-governing">and</span> <span class="function-name">kernel2</span><span class="variable-name"> w1 w2 </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(-.</span>1. <span class="tuareg-font-lock-operator">*.</span> g2<span class="tuareg-font-lock-operator">)</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> coeff <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>z2 w1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>z2 w2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>z1 <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2<span class="tuareg-font-lock-operator">))</span>
  <span class="tuareg-font-lock-governing">and</span> <span class="function-name">kernel3</span><span class="variable-name"> w1 w2 w3 </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-operator">(</span>complex g3 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> coeff <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>z2 w1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>z2 w2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>z2 w3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>z1 <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2 <span class="tuareg-font-lock-operator">+.</span> w3<span class="tuareg-font-lock-operator">))</span>
  <span class="tuareg-font-lock-governing">in</span>
  <span class="comment">(* First order reponse as a function of time t *)</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">first_order</span><span class="variable-name"> t </span><span class="tuareg-font-lock-operator">:</span> <span class="type">Complex.t </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">t </span><span class="tuareg-font-lock-operator">=</span> complex t 0. <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="function-name">term1</span><span class="variable-name"> k </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>0.5 <span class="tuareg-font-lock-operator">*.</span> a1<span class="tuareg-font-lock-operator">)</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel1 w<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. w<span class="tuareg-font-lock-operator">)))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">term2</span><span class="variable-name"> k </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>0.5 <span class="tuareg-font-lock-operator">*.</span> a2<span class="tuareg-font-lock-operator">)</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel1 w<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. w<span class="tuareg-font-lock-operator">)))</span>
    <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-operator">(</span>term1 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>term1 <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>term2 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>term2 <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">))</span>
      <span class="comment">(* Second order reponse as a function of time t *)</span>
  <span class="tuareg-font-lock-governing">and</span> <span class="function-name">second_order</span><span class="variable-name"> t </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">t </span><span class="tuareg-font-lock-operator">=</span> complex t 0. <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="function-name">term1</span><span class="variable-name"> k1 k2 </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1
      <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">w2 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>0.25 <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>a1 <span class="tuareg-font-lock-operator">**</span> 2.<span class="tuareg-font-lock-operator">))</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel2 w1 w2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2<span class="tuareg-font-lock-operator">))))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">term2</span><span class="variable-name"> k1 k2 </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2
      <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">w2 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>0.25 <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>a1 <span class="tuareg-font-lock-operator">**</span> 2.<span class="tuareg-font-lock-operator">))</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel2 w1 w2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2<span class="tuareg-font-lock-operator">))))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">term3</span><span class="variable-name"> k1 k2 </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1
      <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">w2 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>0.5 <span class="tuareg-font-lock-operator">*.</span> a1 <span class="tuareg-font-lock-operator">*.</span> a2<span class="tuareg-font-lock-operator">)</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel2 w1 w2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2<span class="tuareg-font-lock-operator">))))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">all_terms</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">(</span><span class="variable-name">fn</span><span class="tuareg-font-lock-operator">:</span> <span class="type">int </span><span class="tuareg-font-lock-operator">-&gt;</span><span class="type"> int </span><span class="tuareg-font-lock-operator">-&gt;</span><span class="type"> Complex.t</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">:</span> <span class="type">Complex.t </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-operator">(</span>fn 1 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn 1 <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-operator">(</span>all_terms term1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>all_terms term2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>all_terms term3<span class="tuareg-font-lock-operator">)</span>
      <span class="comment">(* Third order reponse as a function of time t *)</span>
  <span class="tuareg-font-lock-governing">and</span> <span class="function-name">third_order</span><span class="variable-name"> t </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">t </span><span class="tuareg-font-lock-operator">=</span> complex t 0. <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="function-name">term1</span><span class="variable-name"> k1 k2 k3 </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w2</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w3 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1<span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>float k2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1<span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>float k3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>0.125 <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>a1 <span class="tuareg-font-lock-operator">**</span> 3.<span class="tuareg-font-lock-operator">))</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel3 w1 w2 w3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2 <span class="tuareg-font-lock-operator">+.</span> w3<span class="tuareg-font-lock-operator">))))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">term2</span><span class="variable-name"> k1 k2 k3 </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w2</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w3 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1<span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>float k2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1<span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>float k3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>3. <span class="tuareg-font-lock-operator">*.</span> 0.125 <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>a1 <span class="tuareg-font-lock-operator">**</span> 2.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> a2<span class="tuareg-font-lock-operator">)</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel3 w1 w2 w3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2 <span class="tuareg-font-lock-operator">+.</span> w3<span class="tuareg-font-lock-operator">))))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">term3</span><span class="variable-name"> k1 k2 k3 </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w2</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w3 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w1<span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>float k2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2<span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>float k3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>3. <span class="tuareg-font-lock-operator">*.</span> 0.125 <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>a2 <span class="tuareg-font-lock-operator">**</span> 2.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> a1<span class="tuareg-font-lock-operator">)</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel3 w1 w2 w3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2 <span class="tuareg-font-lock-operator">+.</span> w3<span class="tuareg-font-lock-operator">))))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">term4</span><span class="variable-name"> k1 k2 k3 </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w2</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w3 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span>float k1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2<span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>float k2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2<span class="tuareg-font-lock-operator">,</span> <span class="tuareg-font-lock-operator">(</span>float k3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> w2 <span class="tuareg-font-lock-governing">in</span>
      <span class="tuareg-font-lock-operator">(</span>complex <span class="tuareg-font-lock-operator">(</span>0.125 <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>a2 <span class="tuareg-font-lock-operator">**</span> 3.<span class="tuareg-font-lock-operator">))</span> 0.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>kernel3 w1 w2 w3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$*</span>
        <span class="tuareg-font-lock-operator">(</span><span class="type">Complex</span>.exp <span class="tuareg-font-lock-operator">(</span>t <span class="tuareg-font-lock-operator">$*</span> <span class="tuareg-font-lock-operator">(</span>complex 0. <span class="tuareg-font-lock-operator">(</span>w1 <span class="tuareg-font-lock-operator">+.</span> w2 <span class="tuareg-font-lock-operator">+.</span> w3<span class="tuareg-font-lock-operator">))))</span>
    <span class="tuareg-font-lock-governing">and</span> <span class="function-name">all_terms</span><span class="variable-name"> fn </span><span class="tuareg-font-lock-operator">=</span>
      <span class="tuareg-font-lock-operator">(</span>fn 1 1 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn 1 1 <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn 1 <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn 1 <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">$+</span>
        <span class="tuareg-font-lock-operator">(</span>fn <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> 1 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> 1 <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> 1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>fn <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">(-</span>1<span class="tuareg-font-lock-operator">))</span>
    <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-operator">(</span>all_terms term1<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>all_terms term2<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>all_terms term3<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">$+</span> <span class="tuareg-font-lock-operator">(</span>all_terms term4<span class="tuareg-font-lock-operator">)</span>
  <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">logx</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> logy </span><span class="tuareg-font-lock-operator">=</span> <span class="constant">false</span><span class="tuareg-font-lock-operator">,</span> <span class="constant">false</span> <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">sweep </span><span class="tuareg-font-lock-operator">:</span> <span class="type">fvector </span><span class="tuareg-font-lock-operator">=</span> frange 0. 0.01 0.00001 <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">trace</span><span class="variable-name"> fn </span><span class="tuareg-font-lock-operator">=</span> farray_map <span class="tuareg-font-lock-operator">(</span><span class="keyword">fun</span> <span class="variable-name">x </span><span class="tuareg-font-lock-operator">-&gt;</span> <span class="type">Complex</span>.norm <span class="tuareg-font-lock-operator">(</span>fn x<span class="tuareg-font-lock-operator">))</span> sweep <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">signal1 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>real_sweep <span class="tuareg-font-lock-operator">=</span> sweep<span class="tuareg-font-lock-operator">;</span> real_trace <span class="tuareg-font-lock-operator">=</span> trace first_order<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">signal2 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>real_sweep <span class="tuareg-font-lock-operator">=</span> sweep<span class="tuareg-font-lock-operator">;</span> real_trace <span class="tuareg-font-lock-operator">=</span> trace second_order<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">signal3 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>real_sweep <span class="tuareg-font-lock-operator">=</span> sweep<span class="tuareg-font-lock-operator">;</span> real_trace <span class="tuareg-font-lock-operator">=</span> trace third_order<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-governing">in</span>  
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">wave1 </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Ospi_waveform</span>.new_signal <span class="tuareg-font-lock-operator">~</span><span class="variable-name">name</span><span class="tuareg-font-lock-operator">:</span><span class="string">"1st Order Response"</span>
    <span class="tuareg-font-lock-operator">~</span><span class="variable-name">trace</span><span class="tuareg-font-lock-operator">:</span>`LinesPoints <span class="tuareg-font-lock-operator">~</span><span class="variable-name">lines</span><span class="tuareg-font-lock-operator">:</span>`Solid <span class="tuareg-font-lock-operator">~</span><span class="variable-name">points</span><span class="tuareg-font-lock-operator">:</span>`None signal1 <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">wave2 </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Ospi_waveform</span>.new_signal <span class="tuareg-font-lock-operator">~</span><span class="variable-name">name</span><span class="tuareg-font-lock-operator">:</span><span class="string">"2nd Order Response"</span>
    <span class="tuareg-font-lock-operator">~</span><span class="variable-name">trace</span><span class="tuareg-font-lock-operator">:</span>`LinesPoints <span class="tuareg-font-lock-operator">~</span><span class="variable-name">lines</span><span class="tuareg-font-lock-operator">:</span>`Solid <span class="tuareg-font-lock-operator">~</span><span class="variable-name">points</span><span class="tuareg-font-lock-operator">:</span>`None signal2 <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">wave3 </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Ospi_waveform</span>.new_signal <span class="tuareg-font-lock-operator">~</span><span class="variable-name">name</span><span class="tuareg-font-lock-operator">:</span><span class="string">"3rd Order Response"</span>
    <span class="tuareg-font-lock-operator">~</span><span class="variable-name">trace</span><span class="tuareg-font-lock-operator">:</span>`LinesPoints <span class="tuareg-font-lock-operator">~</span><span class="variable-name">lines</span><span class="tuareg-font-lock-operator">:</span>`Solid <span class="tuareg-font-lock-operator">~</span><span class="variable-name">points</span><span class="tuareg-font-lock-operator">:</span>`None signal3 <span class="tuareg-font-lock-governing">in</span>
  <span class="type">Plotter</span>.plot <span class="tuareg-font-lock-operator">~</span>logx <span class="tuareg-font-lock-operator">~</span>logy <span class="tuareg-font-lock-operator">[</span>wave1<span class="tuareg-font-lock-operator">];</span>
  <span class="type">Plotter</span>.plot <span class="tuareg-font-lock-operator">~</span>logx <span class="tuareg-font-lock-operator">~</span>logy <span class="tuareg-font-lock-operator">[</span>wave2<span class="tuareg-font-lock-operator">];</span>
  <span class="type">Plotter</span>.plot <span class="tuareg-font-lock-operator">~</span>logx <span class="tuareg-font-lock-operator">~</span>logy <span class="tuareg-font-lock-operator">[</span>wave3<span class="tuareg-font-lock-operator">]</span></pre></p>




<h4>Question #2, Part e</h4>

<p class="first">The derivation of the 3rd order Volterra kernel for three independent
frequencies would be performed in a similar manner to that for two
independent frequencies.  However, the number of unique terms would be
much much larger.</p>


<h4>Question #2, Part f</h4>

<p class="first">First, I've submitted the code snippet that is used to build the
circuit and invoke the Volterra-based analysis.  As usual, the
solution is entirely general.  Note how declarations for <strong>src1</strong>,
<strong>src2</strong>, and <strong>conductance</strong> are passed into the routine including
information about how they are to be hooked to the circuits.  The
values for g1, g2, and g3 are passed in as functions to be computed
based on the DC solution.</p>

<p>    <pre>
<span class="tuareg-font-lock-governing">let</span> <span class="function-name">test_circuit_volterra</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">()</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">c </span><span class="tuareg-font-lock-operator">=</span> new_circuit <span class="tuareg-font-lock-operator">()</span> <span class="tuareg-font-lock-governing">in</span>
  
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">src1 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>
    <span class="type">I</span>.id  <span class="tuareg-font-lock-operator">=</span> 50<span class="tuareg-font-lock-operator">;</span>
    <span class="type">I</span>.pos <span class="tuareg-font-lock-operator">=</span> c<span class="tuareg-font-lock-operator">#</span>index 1<span class="tuareg-font-lock-operator">;</span>
    <span class="type">I</span>.neg <span class="tuareg-font-lock-operator">=</span> c<span class="tuareg-font-lock-operator">#</span>index 0<span class="tuareg-font-lock-operator">;</span>
    <span class="type">I</span>.src <span class="tuareg-font-lock-operator">=</span> <span class="type">Source</span>.<span class="type">AC</span>.vac <span class="tuareg-font-lock-operator">~</span><span class="variable-name">freq</span><span class="tuareg-font-lock-operator">:</span><span class="type">w1 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">mag</span><span class="tuareg-font-lock-operator">:</span><span class="type">a1 </span><span class="tuareg-font-lock-operator">();</span>
  <span class="tuareg-font-lock-operator">}</span>
  <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">src2 </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>
    <span class="type">I</span>.id  <span class="tuareg-font-lock-operator">=</span> 60<span class="tuareg-font-lock-operator">;</span>
    <span class="type">I</span>.pos <span class="tuareg-font-lock-operator">=</span> c<span class="tuareg-font-lock-operator">#</span>index 1<span class="tuareg-font-lock-operator">;</span>
    <span class="type">I</span>.neg <span class="tuareg-font-lock-operator">=</span> c<span class="tuareg-font-lock-operator">#</span>index 0<span class="tuareg-font-lock-operator">;</span>
    <span class="type">I</span>.src <span class="tuareg-font-lock-operator">=</span> <span class="type">Source</span>.<span class="type">AC</span>.vac <span class="tuareg-font-lock-operator">~</span><span class="variable-name">freq</span><span class="tuareg-font-lock-operator">:</span><span class="type">w2 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">mag</span><span class="tuareg-font-lock-operator">:</span><span class="type">a2 </span><span class="tuareg-font-lock-operator">();</span>
  <span class="tuareg-font-lock-operator">}</span>
  <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">conductance </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>
    <span class="type">C</span>.g1_fn <span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span><span class="keyword">fun</span> <span class="variable-name">x </span><span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">(</span>io <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">(</span>x <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)));</span>
    <span class="type">C</span>.g2_fn <span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span><span class="keyword">fun</span> <span class="variable-name">x </span><span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">(</span>0.5 <span class="tuareg-font-lock-operator">*.</span> io <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>vt <span class="tuareg-font-lock-operator">**</span> 2.<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">(</span>x <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)));</span>
    <span class="type">C</span>.g3_fn <span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">(</span><span class="keyword">fun</span> <span class="variable-name">x </span><span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">((</span>1. <span class="tuareg-font-lock-operator">/.</span> 6.<span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">*.</span> io <span class="tuareg-font-lock-operator">/.</span> <span class="tuareg-font-lock-operator">(</span>vt <span class="tuareg-font-lock-operator">**</span> 3.<span class="tuareg-font-lock-operator">))</span> <span class="tuareg-font-lock-operator">*.</span> <span class="tuareg-font-lock-operator">(</span>exp <span class="tuareg-font-lock-operator">(</span>x <span class="tuareg-font-lock-operator">/.</span> vt<span class="tuareg-font-lock-operator">)));</span>
    <span class="type">C</span>.pos   <span class="tuareg-font-lock-operator">=</span> c<span class="tuareg-font-lock-operator">#</span>index 1<span class="tuareg-font-lock-operator">;</span>
    <span class="type">C</span>.neg   <span class="tuareg-font-lock-operator">=</span> c<span class="tuareg-font-lock-operator">#</span>index 0<span class="tuareg-font-lock-operator">;</span>
  <span class="tuareg-font-lock-operator">}</span>
  <span class="tuareg-font-lock-governing">in</span>
  c<span class="tuareg-font-lock-operator">#</span>res 1 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">rs</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>cap 1 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">c</span><span class="tuareg-font-lock-operator">:</span><span class="type">cpi</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>cccs 2 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">id</span><span class="tuareg-font-lock-operator">:</span><span class="type">70 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ref1</span><span class="tuareg-font-lock-operator">:</span><span class="type">1 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ref2</span><span class="tuareg-font-lock-operator">:</span><span class="type">2 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">gain</span><span class="tuareg-font-lock-operator">:</span><span class="type">beta</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>res 2 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">rload</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>volterra <span class="string">"V"</span> <span class="tuareg-font-lock-operator">~</span>src1 <span class="tuareg-font-lock-operator">~</span>src2 <span class="tuareg-font-lock-operator">~</span>conductance<span class="tuareg-font-lock-operator">;</span>
  printf <span class="string">"v(2)=%g\n%!"</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vdc <span class="string">"DC"</span> 2<span class="tuareg-font-lock-operator">)</span></pre></p>


<p>Finally, the incomplete implementation of the method of nonlinear
currents is shown below.  Only the first order response is computed
before I ran out of time.</p>

<p>    <pre>
<span class="tuareg-font-lock-governing">open</span> <span class="type">Circuit</span>
<span class="tuareg-font-lock-governing">open</span> <span class="type">Solver</span>
<span class="tuareg-font-lock-governing">open</span> <span class="type">Gsl_helpers</span>
<span class="tuareg-font-lock-governing">open</span> <span class="type">Printf</span>

<span class="tuareg-font-lock-governing">module</span> <span class="type">Input </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-governing">struct</span>
  <span class="tuareg-font-lock-governing">type</span> <span class="type">input_src_spec </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>
    <span class="variable-name">id</span>       <span class="tuareg-font-lock-operator">:</span> <span class="type">int</span><span class="tuareg-font-lock-operator">;</span>
    <span class="variable-name">pos</span>      <span class="tuareg-font-lock-operator">:</span> <span class="type">circuit_node</span><span class="tuareg-font-lock-operator">;</span>
    <span class="variable-name">neg</span>      <span class="tuareg-font-lock-operator">:</span> <span class="type">circuit_node</span><span class="tuareg-font-lock-operator">;</span>
    <span class="variable-name">src</span>      <span class="tuareg-font-lock-operator">:</span> <span class="type">Source.AC.source</span><span class="tuareg-font-lock-operator">;</span>
  <span class="tuareg-font-lock-operator">}</span>
<span class="tuareg-font-lock-governing">end</span>

<span class="tuareg-font-lock-governing">module</span> <span class="type">Conductance </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-governing">struct</span>
  <span class="tuareg-font-lock-governing">type</span> <span class="type">nonlinear_conductance </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-operator">{</span>
    <span class="variable-name">g1_fn</span>    <span class="tuareg-font-lock-operator">:</span> <span class="type">float </span><span class="tuareg-font-lock-operator">-&gt;</span><span class="type"> float</span><span class="tuareg-font-lock-operator">;</span>
    <span class="variable-name">g2_fn</span>    <span class="tuareg-font-lock-operator">:</span> <span class="type">float </span><span class="tuareg-font-lock-operator">-&gt;</span><span class="type"> float</span><span class="tuareg-font-lock-operator">;</span>
    <span class="variable-name">g3_fn</span>    <span class="tuareg-font-lock-operator">:</span> <span class="type">float </span><span class="tuareg-font-lock-operator">-&gt;</span><span class="type"> float</span><span class="tuareg-font-lock-operator">;</span>
    <span class="variable-name">pos</span>      <span class="tuareg-font-lock-operator">:</span> <span class="type">circuit_node</span><span class="tuareg-font-lock-operator">;</span>
    <span class="variable-name">neg</span>      <span class="tuareg-font-lock-operator">:</span> <span class="type">circuit_node</span><span class="tuareg-font-lock-operator">;</span>
  <span class="tuareg-font-lock-operator">}</span>
<span class="tuareg-font-lock-governing">end</span>

<span class="tuareg-font-lock-governing">module</span> <span class="type">Volterra </span><span class="tuareg-font-lock-operator">=</span> <span class="tuareg-font-lock-governing">functor</span> <span class="tuareg-font-lock-operator">(</span><span class="variable-name">Solver</span><span class="tuareg-font-lock-operator">:</span><span class="type">SOLVER</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-governing">struct</span>
  <span class="comment">(*
    Implements the method of non-linear currents
  *)</span>
  <span class="tuareg-font-lock-governing">module</span> <span class="type">I </span><span class="tuareg-font-lock-operator">=</span> Input
  <span class="tuareg-font-lock-governing">module</span> <span class="type">C </span><span class="tuareg-font-lock-operator">=</span> Conductance
  <span class="tuareg-font-lock-governing">open</span> <span class="type">Gsl_helpers.ComplexHelpers</span>

  <span class="comment">(* This solves the system at a particular frequency w *)</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">solve_at</span><span class="variable-name"> w g_matrix c_matrix b_vec </span><span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">size </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_vector_complex</span>.length b_vec <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x_vec </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_vector_complex</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">zero size </span><span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">mna_matrix </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_matrix_complex</span>.copy c_matrix <span class="tuareg-font-lock-governing">in</span>
    <span class="type">Gsl_matrix_complex</span>.scale mna_matrix <span class="tuareg-font-lock-operator">(</span>complex 0. w<span class="tuareg-font-lock-operator">);</span>
    <span class="type">Gsl_matrix_complex</span>.add mna_matrix g_matrix<span class="tuareg-font-lock-operator">;</span>
    
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">permut </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_permut</span>.create size <span class="tuareg-font-lock-governing">in</span>
    ignore <span class="tuareg-font-lock-operator">(</span><span class="type">Gsl_linalg</span>.complex_LU_decomp <span class="tuareg-font-lock-operator">(</span>`CM mna_matrix<span class="tuareg-font-lock-operator">)</span> permut<span class="tuareg-font-lock-operator">);</span>
    <span class="type">Gsl_linalg</span>.complex_LU_solve <span class="tuareg-font-lock-operator">(</span>`CM mna_matrix<span class="tuareg-font-lock-operator">)</span> permut <span class="tuareg-font-lock-operator">(</span>`CV b_vec<span class="tuareg-font-lock-operator">)</span>
      <span class="tuareg-font-lock-operator">(</span>`CV x_vec<span class="tuareg-font-lock-operator">);</span>
    x_vec

  <span class="comment">(* This is the general Volterra solver *)</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="function-name">solve</span><span class="variable-name"> name s </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">xinit </span><span class="tuareg-font-lock-operator">~(</span><span class="variable-name">src1</span><span class="tuareg-font-lock-operator">:</span><span class="type">I.input_src_spec</span><span class="tuareg-font-lock-operator">)</span>
      <span class="tuareg-font-lock-operator">~(</span><span class="variable-name">src2</span><span class="tuareg-font-lock-operator">:</span><span class="type">I.input_src_spec</span><span class="tuareg-font-lock-operator">)</span> <span class="tuareg-font-lock-operator">~</span>conductance <span class="tuareg-font-lock-operator">=</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">c </span><span class="tuareg-font-lock-operator">=</span> conductance <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">size </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Solver</span>.size s <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="function-name">voltage</span><span class="variable-name"> vec node </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> node <span class="keyword">with</span>
        `Ground <span class="tuareg-font-lock-operator">-&gt;</span> 0.
      <span class="tuareg-font-lock-operator">|</span> `Node loc <span class="tuareg-font-lock-operator">-&gt;</span> vec.<span class="tuareg-font-lock-operator">(</span>loc<span class="tuareg-font-lock-operator">)</span>
    <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">vdc </span><span class="tuareg-font-lock-operator">=</span> voltage xinit c.<span class="type">C</span>.pos <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">g1 </span><span class="tuareg-font-lock-operator">=</span> conductance.<span class="type">C</span>.g1_fn vdc
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">g2 </span><span class="tuareg-font-lock-operator">=</span> conductance.<span class="type">C</span>.g2_fn vdc
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">g3 </span><span class="tuareg-font-lock-operator">=</span> conductance.<span class="type">C</span>.g3_fn vdc
    <span class="tuareg-font-lock-governing">in</span>
    printf <span class="string">"vdc=%g g1=%g g2=%g g3=%g\n%!"</span> vdc g1 g2 g3<span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-operator">(</span><span class="keyword">match</span> c.<span class="type">C</span>.neg <span class="keyword">with</span>
         `Ground <span class="tuareg-font-lock-operator">-&gt;</span> <span class="tuareg-font-lock-operator">()</span>
       <span class="tuareg-font-lock-operator">|</span> `Node _ <span class="tuareg-font-lock-operator">-&gt;</span> <span class="keyword">failwith</span> <span class="string">"non ground node not supported"</span>
    <span class="tuareg-font-lock-operator">);</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">pos_id </span><span class="tuareg-font-lock-operator">=</span> <span class="keyword">match</span> c.<span class="type">C</span>.pos <span class="keyword">with</span>
        `Ground <span class="tuareg-font-lock-operator">-&gt;</span> <span class="keyword">failwith</span> <span class="string">"positive node cannot be grounded"</span>
      <span class="tuareg-font-lock-operator">|</span> `Node loc <span class="tuareg-font-lock-operator">-&gt;</span> loc
    <span class="tuareg-font-lock-governing">in</span>
    <span class="comment">(* retrieve the exiting c_matrix and g_matrix in complex form *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">g_linear </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Solver</span>.get_ac_matrix s <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">c_matrix </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Solver</span>.get_cc_matrix s <span class="tuareg-font-lock-governing">in</span>
    <span class="comment">(* Add the g1 admittance to the g_matrix *)</span>
    g_linear.<span class="tuareg-font-lock-operator">{</span>pos_id<span class="tuareg-font-lock-operator">,</span> pos_id<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span>
      <span class="type">Gsl_complex</span>.add g_linear.<span class="tuareg-font-lock-operator">{</span>pos_id<span class="tuareg-font-lock-operator">,</span> pos_id<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">(</span>complex g1 0.<span class="tuareg-font-lock-operator">);</span>
    
    <span class="comment">(* Step 1... solve DC... skip this for now *)</span>

    <span class="comment">(* Step 2: solver using b1 ... 1st order mixing products *)</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> mag1 </span><span class="tuareg-font-lock-operator">=</span> src1.<span class="type">I</span>.src.<span class="type">Source</span>.<span class="type">AC</span>.freq<span class="tuareg-font-lock-operator">,</span> src1.<span class="type">I</span>.src.<span class="type">Source</span>.<span class="type">AC</span>.mag
    <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">w2</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> mag2 </span><span class="tuareg-font-lock-operator">=</span> src2.<span class="type">I</span>.src.<span class="type">Source</span>.<span class="type">AC</span>.freq<span class="tuareg-font-lock-operator">,</span> src2.<span class="type">I</span>.src.<span class="type">Source</span>.<span class="type">AC</span>.mag <span class="tuareg-font-lock-governing">in</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">b_vec </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Gsl_vector_complex</span>.create <span class="tuareg-font-lock-operator">~</span><span class="variable-name">init</span><span class="tuareg-font-lock-operator">:</span><span class="type">zero size </span><span class="tuareg-font-lock-governing">in</span>
    b_vec.<span class="tuareg-font-lock-operator">{</span>pos_id<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> complex mag1 0.<span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x1 </span><span class="tuareg-font-lock-operator">=</span> solve_at w1 g_linear c_matrix b_vec <span class="tuareg-font-lock-governing">in</span>
    b_vec.<span class="tuareg-font-lock-operator">{</span>pos_id<span class="tuareg-font-lock-operator">}</span> <span class="tuareg-font-lock-operator">&lt;-</span> complex mag2 0.<span class="tuareg-font-lock-operator">;</span>
    <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">x2 </span><span class="tuareg-font-lock-operator">=</span> solve_at w2 g_linear c_matrix b_vec <span class="tuareg-font-lock-governing">in</span>
    print_complex_vector <span class="string">"x1"</span> x1<span class="tuareg-font-lock-operator">;</span>
    print_complex_vector <span class="string">"x2"</span> x2<span class="tuareg-font-lock-operator">;</span>

    <span class="comment">(* Step 3: solve using b2 = g2 * (u1 ^ 2) .. 2nd order mixing products*)</span>

    <span class="comment">(* Step 4: solve using b3 = g3 * (u1 ^ 3) + g2 * u1 * u2 ... 3rd order *)</span>
    <span class="comment">(*Circuit.add_admittance *)</span>

<span class="tuareg-font-lock-governing">end</span><span class="tuareg-font-lock-operator">;;</span></pre></p>



<h4>Question #2, Part g</h4>

<p class="first">Since my computer account appears to be expired, I tried to get
comparison results using my own multi-tone harmonic balance analysis.
The code which builds the circuit and invoked the analysis is shown
below:</p>

<p>    <pre>
<span class="comment">(* Construct a parameterized Diode model *)</span>
<span class="tuareg-font-lock-governing">module</span> <span class="type">Diode </span><span class="tuareg-font-lock-operator">=</span> <span class="type">Circuit_models</span>.Diode<span class="tuareg-font-lock-operator">(</span><span class="tuareg-font-lock-governing">struct</span> <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">vt</span><span class="tuareg-font-lock-operator">=</span>vt <span class="tuareg-font-lock-governing">and</span> <span class="variable-name">io</span><span class="tuareg-font-lock-operator">=</span>io <span class="tuareg-font-lock-governing">end</span><span class="tuareg-font-lock-operator">);;</span>

<span class="tuareg-font-lock-governing">let</span> <span class="function-name">test_circuit_multihb</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">()</span><span class="variable-name"> </span><span class="tuareg-font-lock-operator">=</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">c </span><span class="tuareg-font-lock-operator">=</span> new_circuit <span class="tuareg-font-lock-operator">()</span> <span class="tuareg-font-lock-governing">in</span>
  <span class="tuareg-font-lock-governing">let</span> <span class="variable-name">w1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> w2</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> io</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> vt</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> rs</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> cpi</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> rload</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> beta</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> a1</span><span class="tuareg-font-lock-operator">,</span><span class="variable-name"> a2 </span><span class="tuareg-font-lock-operator">=</span>
    2. <span class="tuareg-font-lock-operator">*.</span> pi <span class="tuareg-font-lock-operator">*.</span> 10e3<span class="tuareg-font-lock-operator">,</span> 2. <span class="tuareg-font-lock-operator">*.</span> pi <span class="tuareg-font-lock-operator">*.</span> 10.1e3<span class="tuareg-font-lock-operator">,</span> 1e<span class="tuareg-font-lock-operator">-</span>15<span class="tuareg-font-lock-operator">,</span> 25e<span class="tuareg-font-lock-operator">-</span>3<span class="tuareg-font-lock-operator">,</span> 50.<span class="tuareg-font-lock-operator">,</span>
    1e<span class="tuareg-font-lock-operator">-</span>12<span class="tuareg-font-lock-operator">,</span> 10e3<span class="tuareg-font-lock-operator">,</span> 100.<span class="tuareg-font-lock-operator">,</span> 1e<span class="tuareg-font-lock-operator">-</span>3<span class="tuareg-font-lock-operator">,</span> 1e<span class="tuareg-font-lock-operator">-</span>4 <span class="tuareg-font-lock-governing">in</span>
  c<span class="tuareg-font-lock-operator">#</span>isrc 1 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">id</span><span class="tuareg-font-lock-operator">:</span><span class="type">50 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ac</span><span class="tuareg-font-lock-operator">:(</span><span class="type">Source</span>.<span class="type">AC</span>.vac <span class="tuareg-font-lock-operator">~</span><span class="variable-name">freq</span><span class="tuareg-font-lock-operator">:</span><span class="type">w1 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">mag</span><span class="tuareg-font-lock-operator">:</span><span class="type">a1 </span><span class="tuareg-font-lock-operator">());</span>
  c<span class="tuareg-font-lock-operator">#</span>isrc 1 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">id</span><span class="tuareg-font-lock-operator">:</span><span class="type">60 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ac</span><span class="tuareg-font-lock-operator">:(</span><span class="type">Source</span>.<span class="type">AC</span>.vac <span class="tuareg-font-lock-operator">~</span><span class="variable-name">freq</span><span class="tuareg-font-lock-operator">:</span><span class="type">w2 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">mag</span><span class="tuareg-font-lock-operator">:</span><span class="type">a2 </span><span class="tuareg-font-lock-operator">());</span>
  c<span class="tuareg-font-lock-operator">#</span>res 1 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">rs</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>cap 1 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">c</span><span class="tuareg-font-lock-operator">:</span><span class="type">cpi</span><span class="tuareg-font-lock-operator">;</span>
  <span class="type"><span class="isearch"><span class="lazy-highlight">Diode</span></span></span>.diode_subckt c <span class="tuareg-font-lock-operator">~</span><span class="variable-name">nb</span><span class="tuareg-font-lock-operator">:</span><span class="type">2 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ne</span><span class="tuareg-font-lock-operator">:</span><span class="type">0</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>cccs 2 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">id</span><span class="tuareg-font-lock-operator">:</span><span class="type">70 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ref1</span><span class="tuareg-font-lock-operator">:</span><span class="type">1 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">ref2</span><span class="tuareg-font-lock-operator">:</span><span class="type">2 </span><span class="tuareg-font-lock-operator">~</span><span class="variable-name">gain</span><span class="tuareg-font-lock-operator">:</span><span class="type">beta</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>res 2 0 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">r</span><span class="tuareg-font-lock-operator">:</span><span class="type">rload</span><span class="tuareg-font-lock-operator">;</span>
  c<span class="tuareg-font-lock-operator">#</span>multiHB <span class="string">"HB"</span> <span class="tuareg-font-lock-operator">~</span><span class="variable-name">k1</span><span class="tuareg-font-lock-operator">:</span><span class="type">5 </span><span class="tuareg-font-lock-operator">~</span>w1 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">k2</span><span class="tuareg-font-lock-operator">:</span><span class="type">2 </span><span class="tuareg-font-lock-operator">~</span>w2<span class="tuareg-font-lock-operator">;</span>

  printf <span class="string">"|Vout(w1)|: %g\n%!"</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 2 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">w1</span><span class="tuareg-font-lock-operator">);</span>
  printf <span class="string">"|Vout(w2)|: %g\n%!"</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 2 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:</span><span class="type">w2</span><span class="tuareg-font-lock-operator">);</span>
  printf <span class="string">"|IM|: %g\n%!"</span> <span class="tuareg-font-lock-operator">(</span>c<span class="tuareg-font-lock-operator">#</span>vm <span class="string">"HB"</span> 2 <span class="tuareg-font-lock-operator">~</span><span class="variable-name">f</span><span class="tuareg-font-lock-operator">:(</span><span class="type">2. </span><span class="tuareg-font-lock-operator">*.</span><span class="type"> w1 </span><span class="tuareg-font-lock-operator">-.</span><span class="type"> w2</span><span class="tuareg-font-lock-operator">))</span></pre></p>


<p>Unfortunately, there were some convergence problems during the HB
source-stepping process and the system never gets past around &quot;<code>alpha
0.15</code>&quot; for any cases where the input signals are relatively large.
This is something that I will continue to work on to correct.  I
believe I need a more robust homotopy method.</p>



</div>
</div>
</body>
</html>
